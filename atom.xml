<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Time渐行渐远</title>
  <subtitle>Coding Changing The World</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://dmlcoding.com/"/>
  <updated>2017-07-27T01:44:00.000Z</updated>
  <id>http://dmlcoding.com/</id>
  
  <author>
    <name>Hushiwei</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>机器视觉处理与Tesseract介绍</title>
    <link href="http://dmlcoding.com/2017/TesseractBasic/"/>
    <id>http://dmlcoding.com/2017/TesseractBasic/</id>
    <published>2017-07-27T01:23:46.000Z</published>
    <updated>2017-07-27T01:44:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>在读取和处理图像、图像相关的机器学习以及创建图像等任务中，Python 一直都是非常出色的语言。虽然有很多库可以进行图像处理，但目前我只接触到Tesseract.</p>
<a id="more"></a>
<h1 id="Tesseract"><a href="#Tesseract" class="headerlink" title="Tesseract"></a>Tesseract</h1><p>Tesseract 是一个 OCR 库,目前由 Google 赞助(Google 也是一家以 OCR 和机器学习技术闻名于世的公司)。Tesseract 是目前公认最优秀、最精确的开源 OCR 系统。 除了极高的精确度,Tesseract 也具有很高的灵活性。它可以通过训练识别出任何字体，也可以识别出任何 Unicode 字符。</p>
<h1 id="安装Tesseract"><a href="#安装Tesseract" class="headerlink" title="安装Tesseract"></a>安装Tesseract</h1><h2 id="Windows-系统"><a href="#Windows-系统" class="headerlink" title="Windows 系统"></a>Windows 系统</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">下载可执行安装文件https://code.google.com/p/tesseract-ocr/downloads/list安装。</div></pre></td></tr></table></figure>
<h2 id="Linux-系统"><a href="#Linux-系统" class="headerlink" title="Linux 系统"></a>Linux 系统</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">可以通过 apt-get 安装: $sudo apt-get tesseract-ocr</div></pre></td></tr></table></figure>
<h2 id="Mac-OS-X系统"><a href="#Mac-OS-X系统" class="headerlink" title="Mac OS X系统"></a>Mac OS X系统</h2><p>用 Homebrew(<a href="http://brew.sh/)等第三方库可以很方便地安装" target="_blank" rel="external">http://brew.sh/)等第三方库可以很方便地安装</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install tesseract</div></pre></td></tr></table></figure></p>
<p>要使用 Tesseract 的功能，比如后面的示例中训练程序识别字母，要先在系统中设置一个新的环境变量 $TESSDATA_PREFIX，让 Tesseract 知道训练的数据文件存储在哪里，然后搞一份tessdata数据文件，放到Tesseract目录下。</p>
<p>在大多数 Linux 系统和 Mac OS X 系统上,你可以这么设置:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$export TESSDATA_PREFIX=/usr/local/share/Tesseract</div></pre></td></tr></table></figure></p>
<p>或者<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">hushiwei@localhost  ~  more ~/.bash_profile</div><div class="line">alias l=&apos;ls -lF&apos;</div><div class="line">alias ll=&apos;ls -alF&apos;</div><div class="line">JAVA_HOME=`/usr/libexec/java_home`</div><div class="line">SCALA_HOME=/Users/hushiwei/devApps/scala-2.10.5</div><div class="line">MAVEN_HOME=/Users/hushiwei/devApps/maven-3.3.9</div><div class="line">TESSDATA_PREFIX=/Users/hushiwei/devApps/Tesseract</div></pre></td></tr></table></figure></p>
<p>在 Windows 系统上也类似,你可以通过下面这行命令设置环境变量:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#setx TESSDATA_PREFIX C:\Program Files\Tesseract OCR\Tesseract</div></pre></td></tr></table></figure></p>
<h1 id="安装pytesseract"><a href="#安装pytesseract" class="headerlink" title="安装pytesseract"></a>安装pytesseract</h1><p>Tesseract 是一个 Python 的命令行工具，不是通过 import 语句导入的库。安装之后,要用 tesseract 命令在 Python 的外面运行，但我们可以通过 pip 安装支持Python 版本的 Tesseract库：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install pytesseract</div></pre></td></tr></table></figure></p>
<h1 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h1><p>目前只能处理规范的文字,那么什么算<code>格式规范</code>呢?<br>格式规范的文字具有以下特点:</p>
<ul>
<li>使用一个标准字体(不包含手写体、草书,或者十分“花哨的”字体) • 虽然被复印或拍照,字体还是很清晰,没有多余的痕迹或污点</li>
<li>排列整齐,没有歪歪斜斜的字</li>
<li>没有超出图片范围,也没有残缺不全,或紧紧贴在图片的边缘</li>
</ul>
<p>格式规范的图片示例<br><img src="/images/python/test.png" alt="test图片"></p>
<h2 id="命令行方式"><a href="#命令行方式" class="headerlink" title="命令行方式"></a>命令行方式</h2><p>那么试一试Tesseract,,看看效果如何.用起来也是非常简单.读取图片,然后把结果写入到一个文本文件中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hushiwei@localhost  ~/Desktop  tesseract test.png text</div><div class="line">Tesseract Open Source OCR Engine v3.05.01 with Leptonica</div><div class="line">Warning. Invalid resolution 0 dpi. Using 70 instead.</div></pre></td></tr></table></figure></p>
<p>接着打开这个文本看看效果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hushiwei@localhost  ~/Desktop  more text.txt</div><div class="line">This is some text, written in Arial, that will be read by</div><div class="line">Tesseract. Here are some symbols: !@#$%&quot;&amp;&apos;()</div></pre></td></tr></table></figure></p>
<p>除了一个小符号没有识别出来,其他的字符基本上都识别对了.</p>
<h2 id="python代码方式进行识别"><a href="#python代码方式进行识别" class="headerlink" title="python代码方式进行识别"></a>python代码方式进行识别</h2><p>用之前安装的<code>pytesseract</code>模块,就可以很方便的完成我们想要的效果</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">import pytesseract</div><div class="line"></div><div class="line">from PIL import Image</div><div class="line"></div><div class="line"># 打开一个图片</div><div class="line">image=Image.open(&apos;test.png&apos;)</div><div class="line"></div><div class="line"># 调用pytesseract的image_to_string方法识别出图片中的文字,返回识别出来的文字</div><div class="line">text=pytesseract.image_to_string(image)</div><div class="line"></div><div class="line"># 打印文字看看效果</div><div class="line">print text</div></pre></td></tr></table></figure>
<p>输出结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">This is some text, written in Arial, that will be read by</div><div class="line">Tesseract. Here are some symbols: !@#$%&quot;&amp;&apos;()</div><div class="line"></div><div class="line">Process finished with exit code 0</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在读取和处理图像、图像相关的机器学习以及创建图像等任务中，Python 一直都是非常出色的语言。虽然有很多库可以进行图像处理，但目前我只接触到Tesseract.&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="http://dmlcoding.com/categories/python/"/>
    
    
      <category term="python" scheme="http://dmlcoding.com/tags/python/"/>
    
      <category term="tesseract" scheme="http://dmlcoding.com/tags/tesseract/"/>
    
  </entry>
  
  <entry>
    <title>Hbase笔记</title>
    <link href="http://dmlcoding.com/2017/HbaseNotes/"/>
    <id>http://dmlcoding.com/2017/HbaseNotes/</id>
    <published>2017-07-24T02:00:00.000Z</published>
    <updated>2017-07-25T06:07:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>在开发hbase过程中,遇到的一些问题.还有些许知识点的总结.<br><a id="more"></a></p>
<h1 id="hbase的内存分配"><a href="#hbase的内存分配" class="headerlink" title="hbase的内存分配"></a>hbase的内存分配</h1><blockquote>
<p>HBase的默认堆分配策略，40%给blockcache，40%给memstore<br>在HBase中，有两个在内存中的结构消费了绝大多数的heap空间。BlockCache缓存读操作的HFile block，Memstore缓存近期的写操作。</p>
</blockquote>
<ul>
<li>hfile.block.cache.size(读多的场景下,适当增大这个参数的值)</li>
<li>hbase.regionserver.global.memstore.upperLimit(写多的场景下,适当增大这个参数的值)</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在开发hbase过程中,遇到的一些问题.还有些许知识点的总结.&lt;br&gt;
    
    </summary>
    
      <category term="hbase" scheme="http://dmlcoding.com/categories/hbase/"/>
    
    
      <category term="hbase" scheme="http://dmlcoding.com/tags/hbase/"/>
    
      <category term="bigdata" scheme="http://dmlcoding.com/tags/bigdata/"/>
    
  </entry>
  
  <entry>
    <title>年中总结</title>
    <link href="http://dmlcoding.com/2017/WhatIWriteIsShit/"/>
    <id>http://dmlcoding.com/2017/WhatIWriteIsShit/</id>
    <published>2017-07-16T02:20:00.000Z</published>
    <updated>2017-07-18T02:01:08.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/beautifulPic/1.jpg" alt="风景"><br>写了这么多句,没有写出一句有意思的话;<br>写了这么多篇,没有写出一篇有深意的文章;<br>不是流水账,仍似流水账;</p>
<a id="more"></a>
<h1 id="我干了些啥"><a href="#我干了些啥" class="headerlink" title="我干了些啥"></a>我干了些啥</h1><blockquote>
<p>2017已经过去了一半</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/beautifulPic/1.jpg&quot; alt=&quot;风景&quot;&gt;&lt;br&gt;写了这么多句,没有写出一句有意思的话;&lt;br&gt;写了这么多篇,没有写出一篇有深意的文章;&lt;br&gt;不是流水账,仍似流水账;&lt;/p&gt;
    
    </summary>
    
      <category term="think" scheme="http://dmlcoding.com/categories/think/"/>
    
    
      <category term="think" scheme="http://dmlcoding.com/tags/think/"/>
    
  </entry>
  
  <entry>
    <title>逻辑回归笔记</title>
    <link href="http://dmlcoding.com/2017/LogicalRegression/"/>
    <id>http://dmlcoding.com/2017/LogicalRegression/</id>
    <published>2017-07-12T09:24:00.000Z</published>
    <updated>2017-07-13T10:30:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>不知道什么是逻辑回归,但是也许看完接下来的文章,你会有个大概的印象吧<br><a id="more"></a></p>
<h1 id="简单介绍Logistic回归"><a href="#简单介绍Logistic回归" class="headerlink" title="简单介绍Logistic回归"></a>简单介绍Logistic回归</h1><h2 id="Logistic回归用到的知识点"><a href="#Logistic回归用到的知识点" class="headerlink" title="Logistic回归用到的知识点"></a>Logistic回归用到的知识点</h2><ul>
<li>Sigmoid函数和Logistic回归分类器</li>
<li>最优化理论初步</li>
<li>梯度下降最优化算法</li>
<li>数据中的缺失项处理</li>
</ul>
<h2 id="Logistic回归的一般过程"><a href="#Logistic回归的一般过程" class="headerlink" title="Logistic回归的一般过程"></a>Logistic回归的一般过程</h2><ul>
<li>1.收集数据:采用任意方法收集数据</li>
<li>2.准备数据:由于需要进行距离计算,因此要求数据类型为数值型.另外,结构化数据格式则最佳.</li>
<li>3.分析数据:采用任意方法对数据进行分析.</li>
<li>4.训练算法:大部分时间将用于训练,训练的目的是为了找到最佳的分类回归系数.</li>
<li>5.使用算法:首先,我们需要一些输入数据,并将其转换成对应的结构化数值;接着,基于训练好的回归系数就可以对这些数值进行简单的回归计算,判定他们属于哪个类别;在这之后,我们就可以在输出的类别上做一些其他分析工作.</li>
</ul>
<h1 id="基于Logistic回归和Sigmoid函数的分类"><a href="#基于Logistic回归和Sigmoid函数的分类" class="headerlink" title="基于Logistic回归和Sigmoid函数的分类"></a>基于Logistic回归和Sigmoid函数的分类</h1><h2 id="Logistic回归"><a href="#Logistic回归" class="headerlink" title="Logistic回归"></a>Logistic回归</h2><ul>
<li>优点<ul>
<li>计算代价不高</li>
<li>易于理解和实现</li>
</ul>
</li>
<li>缺点<ul>
<li>容易欠拟合</li>
<li>分类精度可能不高</li>
</ul>
</li>
<li>适用类型<ul>
<li>数值型(数值型目标变量则可以从无限的数值集合中取值，如0.100，42.001等 (数值型目标变量主要用于回归分析))</li>
<li>标称型数据(标称型目标变量的结果只在有限目标集中取值，如真与假(标称型目标变量主要用于分类))</li>
</ul>
</li>
</ul>
<p>基本公式:<br>Sigmoid函数具体的计算公式</p>
<math xmlns="http://www.w3.org/1998/Math/MathML">  <mstyle displaystyle="true">    <mi> &#x03C3;<!--greek small letter sigma--> </mi>    <mfenced>      <mrow>        <mi> z </mi>      </mrow>    </mfenced>    <mo> = </mo>    <mfrac>      <mrow>        <mn> 1 </mn>      </mrow>      <mrow>        <mn> 1 </mn>        <mo> + </mo>        <msup>          <mrow>            <mi> e </mi>          </mrow>          <mrow>            <mo> - </mo>            <mi> z </mi>          </mrow>        </msup>      </mrow>    </mfrac>  </mstyle></math>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;不知道什么是逻辑回归,但是也许看完接下来的文章,你会有个大概的印象吧&lt;br&gt;
    
    </summary>
    
      <category term="ml" scheme="http://dmlcoding.com/categories/ml/"/>
    
    
      <category term="ml" scheme="http://dmlcoding.com/tags/ml/"/>
    
  </entry>
  
  <entry>
    <title>druid遇到的坑</title>
    <link href="http://dmlcoding.com/2017/DruidQuickStart/"/>
    <id>http://dmlcoding.com/2017/DruidQuickStart/</id>
    <published>2017-07-09T10:24:00.000Z</published>
    <updated>2017-07-10T10:27:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>学习druid过程中遇到的一些坑,记录一下.方便自己方便大家.<br><a id="more"></a></p>
<h1 id="提交任务失败"><a href="#提交任务失败" class="headerlink" title="提交任务失败"></a>提交任务失败</h1><ul>
<li><p>错误日志</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">1) Not enough direct memory.  Please adjust -XX:MaxDirectMemorySize, druid.processing.buffer.sizeBytes,</div><div class="line"> druid.processing.numThreads, or druid.processing.numMergeBuffers: maxDirectMemory[8,589,934,592],</div><div class="line"> memoryNeeded[13,958,643,712] = druid.processing.buffer.sizeBytes[1,073,741,824] *</div><div class="line">  (druid.processing.numMergeBuffers[2] + druid.processing.numThreads[10] + 1)</div></pre></td></tr></table></figure>
</li>
<li><p>解决办法<br>修改启动参数中的配置conf/druid/middlemanager/runtime.properties</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">-XX:MaxDirectMemorySize=25g</div><div class="line">druid.processing.numThreads=35</div><div class="line">只需要将处理线程数改小，或者调大启动参数 -XX:MaxDirectMemorySize 即可</div></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="coordinator协调节点-数据源报红"><a href="#coordinator协调节点-数据源报红" class="headerlink" title="coordinator协调节点,数据源报红"></a>coordinator协调节点,数据源报红</h1><ul>
<li>问题描述<br><img src="/images/pics/druiderror1.png" alt="数据源报红"></li>
<li>解决办法<br><img src="/images/pics/druidR1.png" alt="数据源报红"></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学习druid过程中遇到的一些坑,记录一下.方便自己方便大家.&lt;br&gt;
    
    </summary>
    
      <category term="druid" scheme="http://dmlcoding.com/categories/druid/"/>
    
    
      <category term="druid" scheme="http://dmlcoding.com/tags/druid/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu16.04使用Docker部署Gitlab</title>
    <link href="http://dmlcoding.com/2017/DockerInstallGitlab/"/>
    <id>http://dmlcoding.com/2017/DockerInstallGitlab/</id>
    <published>2017-07-05T10:24:00.000Z</published>
    <updated>2017-07-06T09:48:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>我个人非常不喜欢用SVN同步代码,正好想重温一下docker的一些命令,那就用docker方便的搭建一下gitlab.</p>
<h1 id="ubuntu安装docker"><a href="#ubuntu安装docker" class="headerlink" title="ubuntu安装docker"></a>ubuntu安装docker</h1><a id="more"></a>
<h2 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h2><blockquote>
<p>Docker 要求 Ubuntu 系统的内核版本高于 3.10 ，查看本页面的前提条件来验证你的Ubuntu版本是否支持 Docker 。<br>打开控制台使用 uname -r命令来查看你当前的内核版本。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ uname -r</div><div class="line"> 3.11.0-15-generic</div></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sudo apt-get update</div><div class="line">sudo apt-get update $ sudo apt-get install wget  //安装wget</div><div class="line">wget -qO- https://get.docker.com/ | sh     //获取最新版本的 Docker 安装包，输入完成之后，就会下载脚本并且安装Docker及依赖包。</div><div class="line">docker info //验证安装结果</div></pre></td></tr></table></figure>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><h2 id="Cannot-connect-to-the-Docker-daemon-Is-the-docker-daemon-running-on-this-host"><a href="#Cannot-connect-to-the-Docker-daemon-Is-the-docker-daemon-running-on-this-host" class="headerlink" title="Cannot connect to the Docker daemon. Is the docker daemon running on this host?"></a>Cannot connect to the Docker daemon. Is the docker daemon running on this host?</h2><ul>
<li>解决:<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sudo su -                       //切换到root</div><div class="line">service docker start      //启动docker service</div><div class="line">docker images              //显示所有images</div><div class="line">docker run hello-world  //重新运行</div></pre></td></tr></table></figure>
</li>
</ul>
<p>恩，是权限问题，当前用户没权限，root用户可以运行</p>
<h1 id="下载需要的镜像"><a href="#下载需要的镜像" class="headerlink" title="下载需要的镜像"></a>下载需要的镜像</h1><p>以下脚本会下载gitlab,mysql,redis镜像<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">docker pull sameersbn/gitlab:latest</div><div class="line">docker pull sameersbn/mysql:latest</div><div class="line">docker pull sameersbn/redis:latest</div></pre></td></tr></table></figure></p>
<h1 id="启动需要的镜像"><a href="#启动需要的镜像" class="headerlink" title="启动需要的镜像"></a>启动需要的镜像</h1><h2 id="启动redis"><a href="#启动redis" class="headerlink" title="启动redis"></a>启动redis</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">docker run \</div><div class="line">  --name=gitlab_redis \</div><div class="line">  -tid \</div><div class="line">  sameersbn/redis:latest</div></pre></td></tr></table></figure>
<h2 id="启动mysql"><a href="#启动mysql" class="headerlink" title="启动mysql"></a>启动mysql</h2><p>注意这里写你的用户名和密码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">mkdir -p /opt/gitlab/mysql</div><div class="line">docker run \</div><div class="line">  --name=gitlab_mysql \</div><div class="line">  -tid \</div><div class="line">  -e &apos;DB_NAME=gitlabhq_production&apos; \</div><div class="line">  -e &apos;DB_USER=gitlab&apos; \</div><div class="line">  -e &apos;DB_PASS=password&apos; \</div><div class="line">  -v /opt/gitlab/mysql:/var/lib/mysql \</div><div class="line">  sameersbn/mysql:latest</div></pre></td></tr></table></figure></p>
<h2 id="启动gitlab"><a href="#启动gitlab" class="headerlink" title="启动gitlab"></a>启动gitlab</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">docker run \</div><div class="line">  --name=&apos;gitlab&apos; \</div><div class="line">  -itd \</div><div class="line">  --link gitlab_mysql:mysql \</div><div class="line">  --link gitlab_redis:redisio \</div><div class="line">  -e &apos;GITLAB_PORT=80&apos; \</div><div class="line">  -e &apos;GITLAB_SSH_PORT=22&apos; \</div><div class="line">  --env &apos;GITLAB_SECRETS_DB_KEY_BASE=long-and-random-alpha-numeric-string&apos; \</div><div class="line">  --env &apos;GITLAB_SECRETS_SECRET_KEY_BASE=long-and-random-alpha-numeric-string&apos; \</div><div class="line">  --env &apos;GITLAB_SECRETS_OTP_KEY_BASE=long-and-random-alpha-numeric-string&apos; \</div><div class="line">  -p 10022:22 -p 10080:80 \</div><div class="line">  -v /var/run/docker.sock:/run/docker.sock \</div><div class="line">  -v $(which docker):/bin/docker \</div><div class="line">  -v /opt/gitlab/data:/home/git/data \</div><div class="line">  -v /opt/gitlab/log:/var/log/gitlab \</div><div class="line">  sameersbn/gitlab:latest</div></pre></td></tr></table></figure>
<p>这一步骤会耗时几分钟，因为这一步会做一些初始化操作,我们可以通过docker logs gitlab来查看安装过程。<br>我们指定了10022作为ssh的访问端口，10080作为http的访问端口，</p>
<p>执行完后，稍微过1-2分钟后，打开以下地址应该就可以访问gitlab了<br><a href="http://localhost:10080" target="_blank" rel="external">http://localhost:10080</a><br>如果是在服务器上搭建，请替换localhost为服务器地址</p>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意:"></a>注意:</h2><p>当出了问题,可以用一些命令查看</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># 列出正在运行的容器</div><div class="line">root@bigdata:~# docker ps</div><div class="line">CONTAINER ID        IMAGE                     COMMAND                  CREATED             STATUS              PORTS                                                   NAMES</div><div class="line">aa93b0654f4b        sameersbn/gitlab:latest   &quot;/sbin/entrypoint....&quot;   43 minutes ago      Up 13 minutes       443/tcp, 0.0.0.0:10022-&gt;22/tcp, 0.0.0.0:10080-&gt;80/tcp   gitlab</div><div class="line">881c31d50c53        sameersbn/mysql:latest    &quot;/sbin/entrypoint....&quot;   About an hour ago   Up 14 minutes       3306/tcp                                                gitlab_mysql</div><div class="line">e5573736680f        sameersbn/redis:latest    &quot;/sbin/entrypoint.sh&quot;    About an hour ago   Up 14 minutes       6379/tcp                                                gitlab_redis</div></pre></td></tr></table></figure>
<ul>
<li>列出所有容器的状态<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">root@bigdata:~# docker ps -a</div><div class="line">CONTAINER ID        IMAGE                     COMMAND                  CREATED             STATUS              PORTS                                                   NAMES</div><div class="line">aa93b0654f4b        sameersbn/gitlab:latest   &quot;/sbin/entrypoint....&quot;   44 minutes ago      Up 14 minutes       443/tcp, 0.0.0.0:10022-&gt;22/tcp, 0.0.0.0:10080-&gt;80/tcp   gitlab</div><div class="line">881c31d50c53        sameersbn/mysql:latest    &quot;/sbin/entrypoint....&quot;   About an hour ago   Up 14 minutes       3306/tcp                                                gitlab_mysql</div><div class="line">e5573736680f        sameersbn/redis:latest    &quot;/sbin/entrypoint.sh&quot;    About an hour ago   Up 15 minutes       6379/tcp                                                gitlab_redis</div></pre></td></tr></table></figure>
</li>
</ul>
<p>后面可以是容易id,也可以是容器名称</p>
<ul>
<li>docker start CONTAINER ID #启动容器</li>
<li>docker stop CONTAINER ID #停止容器</li>
<li>docker rm -f CONTAINER ID #删除容器</li>
<li>docker logs CONTAINERID  #查看容器的运行时日志</li>
</ul>
<h1 id="进入docker中的服务器"><a href="#进入docker中的服务器" class="headerlink" title="进入docker中的服务器"></a>进入docker中的服务器</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker exec -it 容器名字 bash</div></pre></td></tr></table></figure>
<p>举例:<br>上面部署gitlab,我们还启动了一个mysql容器,我们可以进入这个mysql容器里面看看<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">root@bigdata:~# docker exec -it gitlab_mysql bash</div><div class="line">root@881c31d50c53:/# mysql</div><div class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</div><div class="line">Your MySQL connection id is 16</div><div class="line">Server version: 5.5.54-0ubuntu0.14.04.1 (Ubuntu)</div><div class="line"></div><div class="line">Copyright (c) 2000, 2016, Oracle and/or its affiliates. All rights reserved.</div><div class="line"></div><div class="line">Oracle is a registered trademark of Oracle Corporation and/or its</div><div class="line">affiliates. Other names may be trademarks of their respective</div><div class="line">owners.</div><div class="line"></div><div class="line">Type &apos;help;&apos; or &apos;\h&apos; for help. Type &apos;\c&apos; to clear the current input statement.</div><div class="line"></div><div class="line">mysql&gt;</div></pre></td></tr></table></figure></p>
<p>这样就进入了mysql容器中了.</p>
<h1 id="加入开机启动"><a href="#加入开机启动" class="headerlink" title="加入开机启动"></a>加入开机启动</h1><p>加入/etc/rc.local</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">echo &apos;docker start gitlab_redis&apos; &gt;&gt; /etc/rc.local</div><div class="line">echo &apos;docker start gitlab_mysql&apos; &gt;&gt; /etc/rc.local</div><div class="line">echo &apos;docker start gitlab&apos; &gt;&gt; /etc/rc.local</div></pre></td></tr></table></figure>
<h1 id="备份和恢复gitlab"><a href="#备份和恢复gitlab" class="headerlink" title="备份和恢复gitlab"></a>备份和恢复gitlab</h1><h2 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">docker stop gitlab &amp;&amp; docker rm gitlab</div><div class="line">docker run --name=gitlab -it --rm [OPTIONS] \</div><div class="line">sameersbn/gitlab:latest app:rake gitlab:backup:create</div></pre></td></tr></table></figure>
<h2 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a>恢复</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">docker stop gitlab &amp;&amp; docker rm gitlab</div><div class="line">docker run --name=gitlab -it --rm [OPTIONS] \</div><div class="line">sameersbn/gitlab:latest app:rake gitlab:backup:restore</div></pre></td></tr></table></figure>
<h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>当进入了gitlab的web页面后,新建了一个项目.可以用下面的链接去把工程clone下来.<br>ip换成你的ip地址.因为上面做了端口映射容器的80端口映射到外面是10080端口.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone http://10.211.55.7:10080/shiwei/learndocker.git</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我个人非常不喜欢用SVN同步代码,正好想重温一下docker的一些命令,那就用docker方便的搭建一下gitlab.&lt;/p&gt;
&lt;h1 id=&quot;ubuntu安装docker&quot;&gt;&lt;a href=&quot;#ubuntu安装docker&quot; class=&quot;headerlink&quot; title=&quot;ubuntu安装docker&quot;&gt;&lt;/a&gt;ubuntu安装docker&lt;/h1&gt;
    
    </summary>
    
      <category term="docker" scheme="http://dmlcoding.com/categories/docker/"/>
    
    
      <category term="ubuntu" scheme="http://dmlcoding.com/tags/ubuntu/"/>
    
      <category term="docker" scheme="http://dmlcoding.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>项目中配置文件的读取</title>
    <link href="http://dmlcoding.com/2017/ReadConfigFile/"/>
    <id>http://dmlcoding.com/2017/ReadConfigFile/</id>
    <published>2017-06-25T03:41:00.000Z</published>
    <updated>2017-07-07T06:08:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>在工作中,我们一般都不会把变化的地方写死.比如开发环境和测试环境的服务器地址,等等之类的信息.这些我们都会写入到配置文件中,方便修改.<br><a id="more"></a></p>
<h1 id="com-typesafe-config加载任意位置的配置文件"><a href="#com-typesafe-config加载任意位置的配置文件" class="headerlink" title="com.typesafe.config加载任意位置的配置文件"></a>com.typesafe.config加载任意位置的配置文件</h1><blockquote>
<p>typesafe下的config包可以用来读取配置文件，支持多种形式。</p>
</blockquote>
<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><blockquote>
<p>Typesafe的Config库，纯Java写成、零外部依赖、代码精简、功能灵活、API友好。支持Java properties、JSON、JSON超集格式HOCON以及环境变量。它也是Akka的配置管理库.</p>
</blockquote>
<p>如果没引上,使用如下依赖</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;!-- https://mvnrepository.com/artifact/com.typesafe/config --&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;com.typesafe&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;config&lt;/artifactId&gt;</div><div class="line">    &lt;version&gt;1.3.1&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure>
<ul>
<li>纯java实现，无任何依赖   </li>
<li>可以合并各种格式的配置文件  </li>
<li>可以通过文件、urls、classpath加载配置  </li>
<li>支持多层嵌套的配置方式  </li>
<li>可以转换长短，大小等单位  </li>
<li>类型转换  </li>
</ul>
<h2 id="加载配置文件的两种方式"><a href="#加载配置文件的两种方式" class="headerlink" title="加载配置文件的两种方式"></a>加载配置文件的两种方式</h2><p>目录结构<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"> hushiwei@localhost  ~/IdeaProjects/testProject/src/main  tree</div><div class="line">.</div><div class="line">├── java</div><div class="line">│   └── com</div><div class="line">│       └── husw</div><div class="line">├── resources</div><div class="line">│   ├── conf</div><div class="line">│   │   └── application.conf</div><div class="line">│   ├── testlog.txt</div><div class="line">│   └── log4j.properties</div><div class="line">└── scala</div></pre></td></tr></table></figure></p>
<p>配置文件示例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">kafka &#123;</div><div class="line">  topics = &quot;test_imp&quot; #注释</div><div class="line">  brokers = &quot;192.168.1.1:9092,192.168.2.1:9092&quot;</div><div class="line">  groupid=&quot;test_group1&quot;</div><div class="line">  offset_reset=&quot;smallest&quot; #smallest and largest</div><div class="line">&#125;</div><div class="line">spark &#123;</div><div class="line">  app_name = &quot;dsp_count&quot;</div><div class="line">  mode = &quot;local[2]&quot; #&quot;yarn-client&quot;</div><div class="line">  queue = &quot;normal&quot;</div><div class="line">  duration = 2</div><div class="line">  numFilesPerBatch = 1</div><div class="line">  stagingdir = &quot;/tmp/spark/checkpoint&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="加载resources目录下的配置文件"><a href="#加载resources目录下的配置文件" class="headerlink" title="加载resources目录下的配置文件"></a>加载resources目录下的配置文件</h3><p>默认读取resources目录下的文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">val config = ConfigFactory.load(&quot;conf/application.conf&quot;)</div></pre></td></tr></table></figure></p>
<h3 id="加载任意指定位置的配置文件"><a href="#加载任意指定位置的配置文件" class="headerlink" title="加载任意指定位置的配置文件"></a>加载任意指定位置的配置文件</h3><p>路径可以写任意的绝对路径,或者相对路径<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">val config = ConfigFactory.parseFile(new File(&quot;src/main/resources/conf/application.conf&quot;))</div></pre></td></tr></table></figure></p>
<h3 id="获取配置文件中的键值"><a href="#获取配置文件中的键值" class="headerlink" title="获取配置文件中的键值"></a>获取配置文件中的键值</h3><p>读取配置文件后返回了config对象.<br>直接调用config对象相应的api即可获取配置数据了<br><a href="http://typesafehub.github.io/config/latest/api/com/typesafe/config/ConfigFactory.html" target="_blank" rel="external">Api文档</a><br>示例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">val topics = config.getString(&quot;kafka.topics&quot;).split(&quot;,&quot;).toSet</div><div class="line">println(topics)</div></pre></td></tr></table></figure></p>
<p>若要知道更详细的api说明,点击上面的链接即可.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在工作中,我们一般都不会把变化的地方写死.比如开发环境和测试环境的服务器地址,等等之类的信息.这些我们都会写入到配置文件中,方便修改.&lt;br&gt;
    
    </summary>
    
      <category term="java" scheme="http://dmlcoding.com/categories/java/"/>
    
    
      <category term="java" scheme="http://dmlcoding.com/tags/java/"/>
    
      <category term="scala" scheme="http://dmlcoding.com/tags/scala/"/>
    
  </entry>
  
  <entry>
    <title>python 高级特性之切片</title>
    <link href="http://dmlcoding.com/2017/PythonSplitFunc/"/>
    <id>http://dmlcoding.com/2017/PythonSplitFunc/</id>
    <published>2017-06-21T07:24:00.000Z</published>
    <updated>2017-06-22T07:36:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>python很方便实用,如果你不会切片.那么你真的错过了什么叫方便和实用.<br><a id="more"></a></p>
<h1 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h1><ul>
<li>python中的序列可以使用切片特性</li>
<li>序列类型后面跟上一对方括号.</li>
<li>方括号有一对<strong>可选</strong>的数字,并用冒号分隔.</li>
<li>冒号是必须的</li>
</ul>
<p>切片操作符中的第一个数（冒号之前）表示切片开始的位置，第二个数（冒号之后）表示切片到哪里结束，<br>第三个数（冒号之后）表示切片间隔数(也就是步长)。如果不指定第一个数，Python就从序列首开始。如果没有指定第二个数，则python会停止在序列尾。<br>注意:左包右闭<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">str=&apos;dmlcoding.com&apos;</div><div class="line">str[]</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;python很方便实用,如果你不会切片.那么你真的错过了什么叫方便和实用.&lt;br&gt;
    
    </summary>
    
      <category term="python" scheme="http://dmlcoding.com/categories/python/"/>
    
    
      <category term="python" scheme="http://dmlcoding.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Git 常用命令以及笔记</title>
    <link href="http://dmlcoding.com/2017/GitSkills/"/>
    <id>http://dmlcoding.com/2017/GitSkills/</id>
    <published>2017-06-20T06:00:00.000Z</published>
    <updated>2017-07-13T07:08:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>平时一直是用Intellij进行开发,git命令也不会用命令行去输入.导致有些命令都不太熟悉了,每次用到的时候都是google.<br>今天把平时用到的命令做个笔记记录一下.</p>
<a id="more"></a>
<h1 id="git分布式仓库工作流程"><a href="#git分布式仓库工作流程" class="headerlink" title="git分布式仓库工作流程"></a>git分布式仓库工作流程</h1><p>这里有个图,非常形象的展示了本地仓库和远程仓库以及常用的一些命令的作用范围.<br>一图胜千言,图片摘自<a href="http://krishnaiitd.github.io/gitcommands/git-workflow/" target="_blank" rel="external">http://krishnaiitd.github.io/gitcommands/git-workflow/</a><br><img src="/images/pics/GitWorkflow.png" alt="git工作流"><br><img src="../images/pics/GitWorkflow.png" alt="git工作流"></p>
<h1 id="设置-commit-的用户和邮箱"><a href="#设置-commit-的用户和邮箱" class="headerlink" title="设置 commit 的用户和邮箱"></a>设置 commit 的用户和邮箱</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git config user.name &quot;xx&quot;               #设置 commit 的用户</div><div class="line">git config user.email &quot;xx@xx.com&quot;       #设置 commit 的邮箱</div><div class="line">git commit --amend --author &quot;xxx &lt;xxx@gmail.com&gt;&quot;    #修改上次提交的用户信息</div><div class="line">git config format.pretty oneline        #显示历史记录时，每个提交的信息只显示一行</div></pre></td></tr></table></figure>
<h2 id="配置本地到github的免密"><a href="#配置本地到github的免密" class="headerlink" title="配置本地到github的免密"></a>配置本地到github的免密</h2><p>参考我之前写的 <a href="http://dmlcoding.com/2016/sshlogin/">http://dmlcoding.com/2016/sshlogin/</a></p>
<h1 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h1><h2 id="添加远程仓库"><a href="#添加远程仓库" class="headerlink" title="添加远程仓库"></a>添加远程仓库</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git remote add origin git@server-name:path/repo-name.git  #添加一个远程库</div></pre></td></tr></table></figure>
<h2 id="查看远程仓库"><a href="#查看远程仓库" class="headerlink" title="查看远程仓库"></a>查看远程仓库</h2><blockquote>
<p>origin是远程仓库的别名,约定俗成的叫做original.</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git remote      #要查看远程库的信息</div><div class="line">git remote -v   #显示更详细的信息</div></pre></td></tr></table></figure>
<h2 id="推送分支"><a href="#推送分支" class="headerlink" title="推送分支"></a>推送分支</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push origin master    #推送到远程master分支</div></pre></td></tr></table></figure>
<h2 id="抓取分支"><a href="#抓取分支" class="headerlink" title="抓取分支"></a>抓取分支</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">git clone git@server-name:path/repo-name.git   #克隆远程仓库到本地(能看到master分支)</div><div class="line">git checkout -b dev origin/dev  #创建远程origin的dev分支到本地，并命名为dev</div><div class="line">git checkout origin/dev --track #与上面效果一样</div><div class="line">git pull origin master          #从远程分支进行更新</div><div class="line">git fetch origin master         #获取远程分支上的数据</div></pre></td></tr></table></figure>
<h2 id="抓取GitHub上某个pull-request到本地"><a href="#抓取GitHub上某个pull-request到本地" class="headerlink" title="抓取GitHub上某个pull request到本地"></a>抓取GitHub上某个pull request到本地</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">git fetch origin pull/ID/head:BRANCHNAME</div><div class="line">git checkout BRANCHNAME</div><div class="line">$ git branch --set-upstream branch-name origin/branch-name，可以建立起本地分支和远程分支的关联，之后可以直接git pull从远程抓取分支。</div><div class="line"></div><div class="line">另外，git pull = git fetch + merge to local</div></pre></td></tr></table></figure>
<h2 id="删除远程分支"><a href="#删除远程分支" class="headerlink" title="删除远程分支"></a>删除远程分支</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ git push origin --delete bugfix</div><div class="line">To https://github.com/wuchong/jacman</div><div class="line"> - [deleted]         bugfix</div><div class="line"># 或者直接push一个空分支</div><div class="line">$ git push origin :bugfix</div><div class="line">To https://github.com/wuchong/jacman</div><div class="line"> - [deleted]         bugfix</div></pre></td></tr></table></figure>
<h2 id="更新远程分支信息"><a href="#更新远程分支信息" class="headerlink" title="更新远程分支信息"></a>更新远程分支信息</h2><p>项目往前推进的过程中，远程仓库上经常会增加一些分支、删除一些分支。 所以有时需要与远程同步下分支信息。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git fetch -p</div></pre></td></tr></table></figure></p>
<p>-p就是修剪的意思。它在fetch之后删除掉没有与远程分支对应的本地分支，并且同步一些远程新创建的分支和tag。</p>
<h1 id="历史管理"><a href="#历史管理" class="headerlink" title="历史管理"></a>历史管理</h1><h2 id="查看历史"><a href="#查看历史" class="headerlink" title="查看历史"></a>查看历史</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git log --pretty=oneline filename #一行显示</div><div class="line">git log -p -2      #显示最近2次提交内容的差异</div><div class="line">git show cb926e7   #查看某次修改</div></pre></td></tr></table></figure>
<h2 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git reset --hard HEAD^    #回退到上一个版本</div><div class="line">git reset --hard cb926e7  #回退到具体某个版</div><div class="line">git reflog                #查看命令历史,常用于帮助找回丢失掉的commit</div></pre></td></tr></table></figure>
<p>用HEAD表示当前版本，上一个版本就是HEAD^，上上一个版本就是HEAD^^，HEAD~100就是上100个版本。</p>
<h1 id="管理修改"><a href="#管理修改" class="headerlink" title="管理修改"></a>管理修改</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git status              #查看工作区、暂存区的状态</div><div class="line">git checkout -- &lt;file&gt;  #丢弃工作区上某个文件的修改</div><div class="line">git reset HEAD &lt;file&gt;   #丢弃暂存区上某个文件的修改，重新放回工作区</div></pre></td></tr></table></figure>
<h2 id="查看差异"><a href="#查看差异" class="headerlink" title="查看差异"></a>查看差异</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">git diff              #查看未暂存的文件更新</div><div class="line">git diff --cached     #查看已暂存文件的更新</div><div class="line">git diff HEAD -- readme.txt  #查看工作区和版本库里面最新版本的区别</div><div class="line">git diff &lt;source_branch&gt; &lt;target_branch&gt;  #在合并改动之前，预览两个分支的差异</div><div class="line">使用内建的图形化git：gitk，可以更方便清晰地查看差异。当然 Github 客户端也不错。</div></pre></td></tr></table></figure>
<h2 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git rm &lt;file&gt;           #直接删除文件</div><div class="line">git rm --cached &lt;file&gt;  #删除文件暂存状态</div></pre></td></tr></table></figure>
<h2 id="储藏和恢复"><a href="#储藏和恢复" class="headerlink" title="储藏和恢复"></a>储藏和恢复</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git stash           #储藏当前工作</div><div class="line">git stash list      #查看储藏的工作现场</div><div class="line">git stash apply     #恢复工作现场，stash内容并不删除</div><div class="line">git stash pop       #恢复工作现场，并删除stash内容</div></pre></td></tr></table></figure>
<h1 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h1><h2 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git branch develop              #只创建分支</div><div class="line">git checkout -b master develop  #创建并切换到 develop 分支</div></pre></td></tr></table></figure>
<h2 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git checkout master         #切换到主分支</div><div class="line">git merge --no-ff develop   #把 develop 合并到 master 分支，no-ff 选项的作用是保留原分支记录</div><div class="line">git branch -d develop       #删除 develop 分支</div></pre></td></tr></table></figure>
<h1 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h1><h2 id="显示标签"><a href="#显示标签" class="headerlink" title="显示标签"></a>显示标签</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git tag         #列出现有标签</div><div class="line">git show &lt;tagname&gt;  #显示标签信息</div></pre></td></tr></table></figure>
<h2 id="创建标签"><a href="#创建标签" class="headerlink" title="创建标签"></a>创建标签</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git tag v0.1    #新建标签，默认位 HEAD</div><div class="line">git tag v0.1 cb926e7  #对指定的 commit id 打标签</div><div class="line">git tag -a v0.1 -m &apos;version 0.1 released&apos;   #新建带注释标签</div></pre></td></tr></table></figure>
<h2 id="操作标签"><a href="#操作标签" class="headerlink" title="操作标签"></a>操作标签</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">git checkout &lt;tagname&gt;        #切换到标签</div><div class="line">git push origin &lt;tagname&gt;     #推送分支到源上</div><div class="line">git push origin --tags        #一次性推送全部尚未推送到远程的本地标签</div><div class="line">git tag -d &lt;tagname&gt;          #删除标签</div><div class="line">git push origin :refs/tags/&lt;tagname&gt;      #删除远程标签</div><div class="line">Git 设置</div></pre></td></tr></table></figure>
<p><a href="http://wuchong.me/blog/2015/03/30/git-useful-skills/" target="_blank" rel="external">转载自Jark’s Blog</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;平时一直是用Intellij进行开发,git命令也不会用命令行去输入.导致有些命令都不太熟悉了,每次用到的时候都是google.&lt;br&gt;今天把平时用到的命令做个笔记记录一下.&lt;/p&gt;
    
    </summary>
    
      <category term="git" scheme="http://dmlcoding.com/categories/git/"/>
    
    
      <category term="git" scheme="http://dmlcoding.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>zabbix 部署文档</title>
    <link href="http://dmlcoding.com/2017/Zabbix/"/>
    <id>http://dmlcoding.com/2017/Zabbix/</id>
    <published>2017-04-20T10:24:00.000Z</published>
    <updated>2017-04-21T08:31:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>记录下搭建过程,以免以后又重复花时间找搭建文档<br><a id="more"></a></p>
<h1 id="搭建过程"><a href="#搭建过程" class="headerlink" title="搭建过程"></a>搭建过程</h1><p>搭建是参照这篇博客来搭建的: <a href="http://blog.csdn.net/su1322339466/article/details/53869738" target="_blank" rel="external">http://blog.csdn.net/su1322339466/article/details/53869738</a></p>
<h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><p>安装zabbix_server后,启动 web 页面,默认账号为:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">默认账号: Admin</div><div class="line">默认密码: zabbix</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录下搭建过程,以免以后又重复花时间找搭建文档&lt;br&gt;
    
    </summary>
    
      <category term="linux" scheme="http://dmlcoding.com/categories/linux/"/>
    
    
      <category term="zabbix" scheme="http://dmlcoding.com/tags/zabbix/"/>
    
  </entry>
  
  <entry>
    <title>saltstack web halite 界面部署文档</title>
    <link href="http://dmlcoding.com/2017/SaltStackWeb/"/>
    <id>http://dmlcoding.com/2017/SaltStackWeb/</id>
    <published>2017-04-15T04:10:00.000Z</published>
    <updated>2017-04-19T09:12:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>安装saltstack webui halite管理界面,方便查看和操作<br>安装部署自动化管理工具SaltStack.在管理多台服务器上,这个工具还是非常好使的,另外由于是 Python写的,也可以很方便的对其进行个性化修改.<br><a id="more"></a></p>
<h2 id="安装halite"><a href="#安装halite" class="headerlink" title="安装halite"></a>安装halite</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">cd /var/www/ </div><div class="line">git clone https://github.com/saltstack/halite</div><div class="line">[root@master halite]# pwd</div><div class="line">/var/www/halite/halite</div><div class="line">[root@master halite]# ./genindex.py -C #生成index.html文件:</div></pre></td></tr></table></figure>
<h2 id="安装salt-api"><a href="#安装salt-api" class="headerlink" title="安装salt-api"></a>安装salt-api</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install salt-api</div></pre></td></tr></table></figure>
<h2 id="配置salt-master文件"><a href="#配置salt-master文件" class="headerlink" title="配置salt master文件"></a>配置salt master文件</h2><p>配置salt的master文件，添加：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">[root@master ~]# vim /etc/salt/master</div><div class="line">rest_cherrypy:</div><div class="line"> host: 0.0.0.0</div><div class="line"> port: 8080</div><div class="line"> debug: true</div><div class="line"> static: /var/www/halite/halite</div><div class="line"> app: /var/www/halite/halite/index.html</div><div class="line">external_auth:</div><div class="line">   pam:</div><div class="line">     rui:</div><div class="line">         - .*</div><div class="line">         - &apos;@runner&apos;</div><div class="line">         - &apos;@wheel&apos;</div></pre></td></tr></table></figure></p>
<h2 id="重启master"><a href="#重启master" class="headerlink" title="重启master"></a>重启master</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@master ~]# /etc/init.d/salt-master restart</div><div class="line">Stopping salt-master daemon: [ OK ]</div><div class="line">Starting salt-master daemon: [ OK ]</div></pre></td></tr></table></figure>
<h2 id="添加登陆用户"><a href="#添加登陆用户" class="headerlink" title="添加登陆用户"></a>添加登陆用户</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[root@master ~]# useradd rui</div><div class="line">[root@master ~]# passwd rui</div><div class="line">Changing password for user rui.</div><div class="line">New password:</div><div class="line">BAD PASSWORD: it is too short</div><div class="line">BAD PASSWORD: is too simple</div><div class="line">Retype new password:</div><div class="line">passwd: all authentication tokens updated successfully.</div></pre></td></tr></table></figure>
<h2 id="启动-salt-api"><a href="#启动-salt-api" class="headerlink" title="启动 salt-api"></a>启动 salt-api</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">salt-api -d 或 </div><div class="line">cd /var/www/halite/halite</div><div class="line">python server_bottle.py -d -C -l debug -s cherrypy</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">[root@master ~]# cd /var/www/halite/halite/</div><div class="line">[root@master halite]# python server_bottle.py -d -C -l debug -s cherrypy</div><div class="line">20170415_103758.177076 Bottle: Running web application server &apos;cherrypy&apos; on 0.0.0.0:8080.</div><div class="line">20170415_103758.177237 Bottle: CORS is disabled.</div><div class="line">20170415_103758.177289 Bottle: TLS/SSL is disabled.</div><div class="line">20170415_103758.177335 Bottle: Server options:</div><div class="line">&#123;&#125;</div><div class="line">20170415_103758.417684 Bottle: Running web application server &apos;cherrypy&apos; on 0.0.0.0:8080.</div><div class="line">20170415_103758.417833 Bottle: CORS is disabled.</div><div class="line">20170415_103758.417886 Bottle: TLS/SSL is disabled.</div><div class="line">20170415_103758.417931 Bottle: Server options:</div><div class="line">&#123;&#125;</div><div class="line">Bottle v0.12-dev server starting up (using CherryPyServer())...</div><div class="line">Listening on http://0.0.0.0:8080/</div><div class="line">Hit Ctrl-C to quit.</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;安装saltstack webui halite管理界面,方便查看和操作&lt;br&gt;安装部署自动化管理工具SaltStack.在管理多台服务器上,这个工具还是非常好使的,另外由于是 Python写的,也可以很方便的对其进行个性化修改.&lt;br&gt;
    
    </summary>
    
      <category term="python" scheme="http://dmlcoding.com/categories/python/"/>
    
    
      <category term="python" scheme="http://dmlcoding.com/tags/python/"/>
    
      <category term="saltstack" scheme="http://dmlcoding.com/tags/saltstack/"/>
    
  </entry>
  
  <entry>
    <title>saltstack部署文档</title>
    <link href="http://dmlcoding.com/2017/SaltStack/"/>
    <id>http://dmlcoding.com/2017/SaltStack/</id>
    <published>2017-04-15T02:24:00.000Z</published>
    <updated>2017-04-19T09:09:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>安装部署自动化管理工具SaltStack.在管理多台服务器上,这个工具还是非常好使的,另外由于是 Python写的,也可以很方便的对其进行个性化修改.<br><a id="more"></a></p>
<h2 id="机器"><a href="#机器" class="headerlink" title="机器"></a>机器</h2><table>
<thead>
<tr>
<th style="text-align:left">IP</th>
<th style="text-align:left">hosts</th>
<th style="text-align:left">角色</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">10.211.55.4</td>
<td style="text-align:left">master</td>
<td style="text-align:left">salt-master/salt-minion</td>
</tr>
<tr>
<td style="text-align:left">10.211.55.5</td>
<td style="text-align:left">minion</td>
<td style="text-align:left">salt-minion</td>
</tr>
</tbody>
</table>
<h2 id="master-端配置防火墙-没有配置-直接把防火墙关了"><a href="#master-端配置防火墙-没有配置-直接把防火墙关了" class="headerlink" title="master 端配置防火墙(没有配置,直接把防火墙关了)"></a>master 端配置防火墙(没有配置,直接把防火墙关了)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@master ~]# vim /etc/sysconfig/iptables</div><div class="line">#加入</div><div class="line">-A INPUT -m state --state new -m tcp -p tcp --dport 4505 -j ACCEPT</div><div class="line">-A INPUT -m state --state new -m tcp -p tcp --dport 4506 -j ACCEPT</div></pre></td></tr></table></figure>
<h1 id="安装-epel-源"><a href="#安装-epel-源" class="headerlink" title="安装 epel 源"></a>安装 epel 源</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@master ~]# wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-6.repo</div><div class="line">[root@minion ~]# wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-6.repo</div></pre></td></tr></table></figure>
<h1 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[root@master ~]# service iptables stop</div><div class="line">iptables: Setting chains to policy ACCEPT: nat mangle filte[  OK  ]</div><div class="line">iptables: Flushing firewall rules:                         [  OK  ]</div><div class="line">iptables: Unloading modules:                               [  OK  ]</div><div class="line"></div><div class="line">[root@minion ~]# service iptables stop</div><div class="line">iptables: Setting chains to policy ACCEPT: nat mangle filte[  OK  ]</div><div class="line">iptables: Flushing firewall rules:                         [  OK  ]</div><div class="line">iptables: Unloading modules:                               [  OK  ]</div></pre></td></tr></table></figure>
<h1 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h1><h2 id="master-端安装"><a href="#master-端安装" class="headerlink" title="master 端安装"></a>master 端安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@master ~]# yum -y install salt-master</div></pre></td></tr></table></figure>
<h2 id="minion-端安装"><a href="#minion-端安装" class="headerlink" title="minion 端安装"></a>minion 端安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@minion ~]# yum -y install salt-minion</div></pre></td></tr></table></figure>
<h2 id="master-端配置"><a href="#master-端配置" class="headerlink" title="master 端配置"></a>master 端配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"># 备份</div><div class="line">[root@master ~]# cp /etc/salt/master /etc/salt/master.bak</div><div class="line">[root@master ~]# vim /etc/salt/master</div><div class="line"># 去掉这几行的注释</div><div class="line">405 # Example:</div><div class="line">406 # file_roots:</div><div class="line">407 #   base:</div><div class="line">408 #     - /srv/salt/</div><div class="line">409 #   dev:</div><div class="line">410 #     - /srv/salt/dev/services</div><div class="line">411 #     - /srv/salt/dev/states</div><div class="line">412 #   prod:</div><div class="line">413 #     - /srv/salt/prod/services</div><div class="line">414 #     - /srv/salt/prod/states</div><div class="line">415 #</div><div class="line">416 file_roots:</div><div class="line">417   base:</div><div class="line">418     - /srv/salt</div><div class="line">419</div><div class="line"># 去掉这几行的注释</div><div class="line">529 pillar_roots:</div><div class="line">530   base:</div><div class="line">531     - /srv/pillar</div></pre></td></tr></table></figure>
<p>接着启动 saltmaster 服务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@master ~]# /etc/init.d/salt-master start</div><div class="line">Starting salt-master daemon:                               [  OK  ]</div></pre></td></tr></table></figure></p>
<h2 id="minion-端配置"><a href="#minion-端配置" class="headerlink" title="minion 端配置"></a>minion 端配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"># 备份</div><div class="line">[root@minion ~]# cp /etc/salt/minion /etc/salt/minion.bak </div><div class="line">[root@minion ~]# vim /etc/salt/minion</div><div class="line"># Set the location of the salt master server. If the master server cannot be</div><div class="line"># resolved, then the minion will fail to start.</div><div class="line">master: master #改成 master 的主机或者 IP</div><div class="line"></div><div class="line"></div><div class="line"> 76 # same machine but with different ids, this can be useful for salt compute</div><div class="line"> 77 # clusters.</div><div class="line"> 78 id: salt-minion #定义个名字（建议起个有意义的名字如：nfs、nginx等）</div><div class="line"> 79</div></pre></td></tr></table></figure>
<p> 接着启动 saltminion 服务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@minion ~]# /etc/init.d/salt-minion start</div><div class="line">Starting salt-minion daemon:                               [  OK  ]</div></pre></td></tr></table></figure></p>
<h1 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h1><h2 id="master-端"><a href="#master-端" class="headerlink" title="master 端"></a>master 端</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[root@master ~]# salt-key -L#显示所有minion认证信息</div><div class="line">Accepted Keys:</div><div class="line">Denied Keys:</div><div class="line">Unaccepted Keys:</div><div class="line">salt-minion</div><div class="line">Rejected Keys:</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">[root@master ~]# salt-key -a salt-minion #接受salt-minion的认证信息；可跟参数 -y</div><div class="line">The following keys are going to be accepted:</div><div class="line">Unaccepted Keys:</div><div class="line">salt-minion</div><div class="line">Proceed? [n/Y] y</div><div class="line">Key for minion salt-minion accepted.</div><div class="line"></div><div class="line">[root@master ~]# salt-key</div><div class="line">Accepted Keys:</div><div class="line">salt-minion</div><div class="line">Denied Keys:</div><div class="line">Unaccepted Keys:</div><div class="line">Rejected Keys:</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@master ~]# salt-key -A #接受所有Unaccepted状态的minion认证信息</div></pre></td></tr></table></figure>
<h1 id="一些简单命令介绍"><a href="#一些简单命令介绍" class="headerlink" title="一些简单命令介绍"></a>一些简单命令介绍</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">[root@master ~]# salt &apos;*&apos; test.ping</div><div class="line">salt-minion:</div><div class="line">    True</div><div class="line">[root@master ~]# salt &apos;salt-minion&apos; test.ping</div><div class="line">salt-minion:</div><div class="line">    True</div><div class="line">[root@master ~]# salt &apos;*&apos; cmd.run &apos;df -h&apos;</div><div class="line">salt-minion:</div><div class="line">    Filesystem                    Size  Used Avail Use% Mounted on</div><div class="line">    /dev/mapper/VolGroup-lv_root   31G  3.4G   26G  12% /</div><div class="line">    tmpfs                         497M   96K  497M   1% /dev/shm</div><div class="line">    /dev/sda1                     485M   35M  426M   8% /boot</div><div class="line">    /dev/mapper/VolGroup-lv_home   31G  178M   29G   1% /home</div><div class="line">    Home                          233G   99G  134G  43% /media/psf/Home</div><div class="line">    iCloud                        233G   99G  134G  43% /media/psf/iCloud</div><div class="line">    /dev/sr1                      4.2G  4.2G     0 100% /media/CentOS_6.5_Final</div><div class="line">    /dev/sr0                       98M   98M     0 100% /media/CDROM</div></pre></td></tr></table></figure>
<h1 id="在-master-上也安装上-minion"><a href="#在-master-上也安装上-minion" class="headerlink" title="在 master 上也安装上 minion"></a>在 master 上也安装上 minion</h1><p>这样就有两个 minion</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;安装部署自动化管理工具SaltStack.在管理多台服务器上,这个工具还是非常好使的,另外由于是 Python写的,也可以很方便的对其进行个性化修改.&lt;br&gt;
    
    </summary>
    
      <category term="python" scheme="http://dmlcoding.com/categories/python/"/>
    
    
      <category term="python" scheme="http://dmlcoding.com/tags/python/"/>
    
      <category term="saltstack" scheme="http://dmlcoding.com/tags/saltstack/"/>
    
  </entry>
  
  <entry>
    <title>mysql赋给用户权限grant all privileges on</title>
    <link href="http://dmlcoding.com/2017/mysqlprivileges/"/>
    <id>http://dmlcoding.com/2017/mysqlprivileges/</id>
    <published>2017-04-09T10:24:00.000Z</published>
    <updated>2017-04-10T03:31:34.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="权限问题"><a href="#权限问题" class="headerlink" title="权限问题"></a>权限问题</h1><ul>
<li><p>问题</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">遇到了 SQLException: access denied for  @&apos;localhost&apos; (using password: no)</div></pre></td></tr></table></figure>
</li>
<li><p>解决办法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">grant all privileges on *.* to joe@localhost identified by &apos;1&apos;;</div><div class="line">flush privileges;</div></pre></td></tr></table></figure>
</li>
</ul>
<a id="more"></a>
<h1 id="详细介绍"><a href="#详细介绍" class="headerlink" title="详细介绍"></a>详细介绍</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">MySQL&gt; grant 权限1,权限2,…权限n on 数据库名称.表名称 to 用户名@用户地址 identified by ‘连接口令’;</div></pre></td></tr></table></figure>
<ul>
<li><code>权限1,权限2,…权限n</code>代表select,insert,update,delete,create,drop,index,alter,grant,references,reload,shutdown,process,file等14个权限。</li>
<li>当权限1,权限2,…权限n被all privileges或者all代替，表示赋予用户全部权限。</li>
<li>当数据库名称.表名称被<em>.</em>代替，表示赋予用户操作服务器上所有数据库所有表的权限。</li>
<li>用户地址可以是localhost，也可以是ip地址、机器名字、域名。也可以用’%’表示从任何地址连接。</li>
<li>‘连接口令’不能为空，否则创建失败。</li>
</ul>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">mysql&gt;grant select,insert,update,delete,create,drop on vtdc.employee to joe@10.163.225.87 identified by ‘123′;</div><div class="line">给来自10.163.225.87的用户joe分配可对数据库vtdc的employee表进行select,insert,update,delete,create,drop等操作的权限，并设定口令为123。</div><div class="line"></div><div class="line">mysql&gt;grant all privileges on vtdc.* to joe@10.163.225.87 identified by ‘123′;</div><div class="line">给来自10.163.225.87的用户joe分配可对数据库vtdc所有表进行所有操作的权限，并设定口令为123。</div><div class="line"></div><div class="line">mysql&gt;grant all privileges on *.* to joe@10.163.225.87 identified by ‘123′;</div><div class="line">给来自10.163.225.87的用户joe分配可对所有数据库的所有表进行所有操作的权限，并设定口令为123。</div><div class="line"></div><div class="line">mysql&gt;grant all privileges on *.* to joe@localhost identified by ‘123′;</div><div class="line">给本机用户joe分配可对所有数据库的所有表进行所有操作的权限，并设定口令为123。</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;权限问题&quot;&gt;&lt;a href=&quot;#权限问题&quot; class=&quot;headerlink&quot; title=&quot;权限问题&quot;&gt;&lt;/a&gt;权限问题&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;问题&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;遇到了 SQLException: access denied for  @&amp;apos;localhost&amp;apos; (using password: no)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;解决办法&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;grant all privileges on *.* to joe@localhost identified by &amp;apos;1&amp;apos;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;flush privileges;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="mysql" scheme="http://dmlcoding.com/categories/mysql/"/>
    
    
      <category term="mysql" scheme="http://dmlcoding.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Linux 文件同步工具——rsync</title>
    <link href="http://dmlcoding.com/2017/RsyncSkills/"/>
    <id>http://dmlcoding.com/2017/RsyncSkills/</id>
    <published>2017-03-22T02:24:00.000Z</published>
    <updated>2017-03-23T08:04:35.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>rsync是类unix系统下的数据镜像备份工具，从软件的命名上就可以看出来了——remote sync<br><a id="more"></a></p>
<h2 id="rsync服务器安装与搭建"><a href="#rsync服务器安装与搭建" class="headerlink" title="rsync服务器安装与搭建"></a>rsync服务器安装与搭建</h2><h3 id="软件包安装"><a href="#软件包安装" class="headerlink" title="软件包安装"></a>软件包安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">　　# sudo apt-get  install  rsync  注：在debian、ubuntu 等在线安装方法；</div><div class="line">　　# yum install rsync    注：Fedora、Redhat 等在线安装方法；</div><div class="line">　　# rpm -ivh rsync       注：Fedora、Redhat 等rpm包安装方法；</div></pre></td></tr></table></figure>
<p>其它Linux发行版，请用相应的软件包管理方法来安装。</p>
<h3 id="源码包安装"><a href="#源码包安装" class="headerlink" title="源码包安装"></a>源码包安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">　　tar xvf  rsync-xxx.tar.gz</div><div class="line">　　cd rsync-xxx</div><div class="line">　　./configure --prefix=/usr  ;make ;make install   注：在用源码包编译安装之前，您得安装gcc等编译工具才行；</div></pre></td></tr></table></figure>
<h2 id="rsync-服务端配置"><a href="#rsync-服务端配置" class="headerlink" title="rsync 服务端配置"></a>rsync 服务端配置</h2><blockquote>
<p>安装好 rsync 软件后,只需要创建配置好两个文件,然后开启 rsync 服务就可以了</p>
</blockquote>
<p>服务器配置文件(/etc/rsyncd.conf)，该文件默认不存在，请创建它。具体步骤如下</p>
<ul>
<li>用root用户创建：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">#touch /etc/rsyncd.conf  #创建rsyncd.conf，这是rsync服务器的配置文件。</div><div class="line">#touch /etc/rsyncd.secrets  #创建rsyncd.secrets ，这是用户密码文件。这个密码文件很好的哦，你可以设置一个用户名：密码的数值对，然后在客户端设置一个密码文件，只写密码就可以了，一会细讲。</div><div class="line"></div><div class="line">#chmod 600 /etc/rsyncd.secrets  #将rsyncd.secrets这个密码文件的文件属性设为root拥有, 且权限要设为600, 否则无法备份成功!</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="修改rsyncd-conf文件"><a href="#修改rsyncd-conf文件" class="headerlink" title="修改rsyncd.conf文件"></a>修改rsyncd.conf文件</h3><blockquote>
<p>rsyncd.conf是rsync服务器主要配置文件</p>
</blockquote>
<p>比如我想要把远程机器上的文件,拉到这个服务器上的/home/root/tmp_hsw位置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">vi /etc/rsyncd.conf</div><div class="line"></div><div class="line">pid file = /var/run/rsyncd.pid</div><div class="line">port = 873</div><div class="line">uid = root</div><div class="line">gid = root</div><div class="line"></div><div class="line">use chroot = yes</div><div class="line">read only = no</div><div class="line"></div><div class="line">#limit access to private LANs</div><div class="line">hosts allow= 10.10.25.14</div><div class="line">hosts deny=*</div><div class="line"></div><div class="line">max connections = 5</div><div class="line">#motd file = /etc/rsyncd.motd</div><div class="line"></div><div class="line">#This will give you a separate log file</div><div class="line">log file = /var/log/rsync.log</div><div class="line"></div><div class="line">#This will log every file transferred - up to 85,000+ per user, per sync</div><div class="line">transfer logging = yes</div><div class="line"></div><div class="line">log format = %t %a %m %f %b</div><div class="line">syslog facility = local3</div><div class="line">timeout = 300</div><div class="line"></div><div class="line">[getcoolpaddata]</div><div class="line">path = /home/root/tmp_hsw/testRsync</div><div class="line">list=yes</div><div class="line">ignore errors</div><div class="line">auth users = root</div><div class="line">secrets file = /etc/rsyncd.secrets</div><div class="line">comment = This is test for get coolpad data</div><div class="line">#exclude = easylife/  samba/</div></pre></td></tr></table></figure>
<ul>
<li>注意: 关于auth users是必须在服务器上存在的真实的系统用户，如果你想用多个用户以,号隔开，比如auth users = easylife,root</li>
</ul>
<h4 id="解释rsyncd-conf文件配置项"><a href="#解释rsyncd-conf文件配置项" class="headerlink" title="解释rsyncd.conf文件配置项"></a>解释rsyncd.conf文件配置项</h4><blockquote>
<p>在rsync 服务器中，全局定义有几个比较关健的，根据我们前面所给的配置文件 rsyncd.conf 文件</p>
</blockquote>
<ul>
<li>全局配置<ul>
<li>pid file = /var/run/rsyncd.pid              注：告诉进程写到 /var/run/rsyncd.pid 文件中；</li>
<li>port = 873                                  注：指定运行端口，默认是873，您可以自己指定；</li>
<li>uid = root   </li>
<li>gid = root                                  注：服务器端传输文件时，要发哪个用户和用户组来执行，默认是nobody。 如果用nobody 用户和用户组，可能遇到权限问题，有些文件从服务器上拉不下来。所以我就偷懒，为了方便，用了root 。不过您可以在定义要同步的目录时定义的模块中指定用户来解决权限的问题。</li>
<li>use chroot = yes</li>
<li>read only = yes                             注：read only 是只读选择，也就是说，不让客户端上传文件到服务器上。还有一个 write only选项，自己尝试是做什么用的吧；</li>
<li>hosts allow= 10.10.25.14                    注: 允许访问的主机 IP</li>
<li>max connections = 5                         注：客户端最多连接数</li>
<li>log file = /var/log/rsync.log               注：rsync 服务器的日志；</li>
<li>transfer logging = yes                      注：这是传输文件的日志 </li>
<li>log format = %t %a %m %f %b</li>
<li>syslog facility = local3</li>
<li>timeout = 300</li>
</ul>
</li>
</ul>
<blockquote>
<p>模块定义什么呢？主要是定义服务器哪个目录要被同步。每个模块都要以[name]形式。这个名字就是在rsync 客户端看到的名字，其实有点象Samba服务器提供的共享名。而服务器真正同步的数据是通过path 指定的。我们可以根据自己的需要，来指定多个模块。每个模块要指定认证用户，密码文件、并排除并不是必须的文件</p>
</blockquote>
<ul>
<li>模块定义<ul>
<li>[getcoolpaddata]  #模块它为我们提供了一个链接的名字，在本模块中链接到了/home/root/tmp_hsw/testRsync目录；要用[name] 形式</li>
<li>path = /home    #指定文件目录所在位置，这是必须指定的 </li>
<li>auth users = root   #认证用户是root  ，是必须在服务器上存在的用户</li>
<li>list=yes   #list 意思是把rsync 服务器上提供同步数据的目录在服务器上模块是否显示列出来。默认是yes 。如果你不想列出来，就no ；如果是no是比较安全的，至少别人不知道你的服务器上提供了哪些目录。你自己知道就行了；</li>
<li>ignore errors  #忽略IO错误</li>
<li>secrets file = /etc/rsyncd.secrets   #密码存在哪个文件</li>
<li>comment = linuxsir home  data  #注释可以自己定义</li>
<li>exclude = beinan/ samba/     # exclude是排除的意思，也就是说，要把/home目录下的easylife和samba排除在外； easylife/和samba/目录之间有空格分开</li>
</ul>
</li>
</ul>
<h3 id="设定密码文件-etc-rsyncd-secrets"><a href="#设定密码文件-etc-rsyncd-secrets" class="headerlink" title="设定密码文件/etc/rsyncd.secrets"></a>设定密码文件/etc/rsyncd.secrets</h3><p>密码文件格式很简单，rsyncd.secrets的内容格式为：</p>
<p>　　用户名:密码</p>
<p>比如:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">vi /etc/rsyncd.secrets</div><div class="line"></div><div class="line">root:rsy123456</div></pre></td></tr></table></figure></p>
<p>修改权限<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">chown root.root rsyncd.secrets 　#修改属主</div><div class="line">chmod 600 rsyncd.secrets     #修改权限</div></pre></td></tr></table></figure></p>
<ul>
<li>注意<ul>
<li>1、将rsyncd.secrets这个密码文件的文件属性设为root拥有, 且权限要设为600, 否则无法备份成功! 出于安全目的，文件的属性必需是只有属主可读。</li>
<li>2、这里的密码值得注意，为了安全你不能把系统用户的密码写在这里。比如你的系统用户root密码是 helloworld，为了安全你可以让rsync中的rsyncd.secrets文件中的密码为为123456。这样，在客户端连接的时候，也是用这个123456会使用这个rsyncd.secrets作为认证文件，不和os有任何牵连。</li>
</ul>
</li>
</ul>
<h2 id="配置客户端"><a href="#配置客户端" class="headerlink" title="配置客户端"></a>配置客户端</h2><blockquote>
<p>上面两个配置文件都是在启动 rsycn的服务器端,然而在我们的客户端,我们安装了 rsync后,只需要创建一个密码文件,里面放上服务器上定义的密码即可了</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">root: vi /etc/rsyncd.passwd</div><div class="line">rsy123456</div></pre></td></tr></table></figure>
<h2 id="启动rsync服务器及防火墙的设置"><a href="#启动rsync服务器及防火墙的设置" class="headerlink" title="启动rsync服务器及防火墙的设置"></a>启动rsync服务器及防火墙的设置</h2><blockquote>
<p>启动rsync服务器相当简单</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">--daemon参数方式，是让rsync以服务器模式运行</div><div class="line"></div><div class="line"># /usr/bin/rsync --daemon  --config=/etc/rsyncd/rsyncd.conf 　#--config用于指定rsyncd.conf的位置,如果在/etc下可以不写</div></pre></td></tr></table></figure>
<h2 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h2><p>把客户端/home/root/tmp_hsw 路径下的文件同步到服务器下.路径为 path 里面定义的</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rsync -avz --progress  --password-file=/etc/rsyncd.passwd --delete /home/root/tmp_hsw root@10.10.25.13::getcoolpaddata/</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>1.在客户端的时候,你想用客户端的哪个用户传输数据,那么客户端上面的/etc/rsyncd.passwd文件就得是这个用户文件,并且权限是600<br>2.都使用 root 用户肯定是没有问题的<br>3.在服务端的时候,如果不想用 root 用户.那么那两个配置文件的权限都得是 root 用户,然后再 rsync.conf 里面把 uid,cid,auth users改成普通用户即可.</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>配置过程参考文章:<a href="http://blog.csdn.net/cymm_liu/article/details/31347531" target="_blank" rel="external">http://blog.csdn.net/cymm_liu/article/details/31347531</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;rsync是类unix系统下的数据镜像备份工具，从软件的命名上就可以看出来了——remote sync&lt;br&gt;
    
    </summary>
    
      <category term="linux" scheme="http://dmlcoding.com/categories/linux/"/>
    
    
      <category term="linux" scheme="http://dmlcoding.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title> Shell Skills</title>
    <link href="http://dmlcoding.com/2017/ShellSkills/"/>
    <id>http://dmlcoding.com/2017/ShellSkills/</id>
    <published>2017-03-12T10:24:00.000Z</published>
    <updated>2017-03-20T10:54:33.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>写 shell 脚本两三技巧</p>
</blockquote>
<h1 id="Shell脚本编程30分钟入门"><a href="#Shell脚本编程30分钟入门" class="headerlink" title="Shell脚本编程30分钟入门"></a>Shell脚本编程30分钟入门</h1><p><a href="https://github.com/qinjx/30min_guides/blob/master/shell.md" target="_blank" rel="external">https://github.com/qinjx/30min_guides/blob/master/shell.md</a></p>
<h1 id="获取脚本的所处的当前路径"><a href="#获取脚本的所处的当前路径" class="headerlink" title="获取脚本的所处的当前路径"></a>获取脚本的所处的当前路径</h1><a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">DIR=&quot;$( cd &quot;$( dirname &quot;$&#123;BASH_SOURCE[0]&#125;&quot; )&quot; &amp;&amp; pwd )&quot;</div></pre></td></tr></table></figure>
<h2 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h2><ul>
<li><p>示例:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">#DIR=&quot;$( cd &quot;$( dirname &quot;$&#123;BASH_SOURCE[0]&#125;&quot; )&quot; &amp;&amp; pwd )&quot;</div><div class="line"></div><div class="line">S0=&quot;$&#123;BASH_SOURCE[0]&#125;&quot;</div><div class="line"></div><div class="line">DIRNAME=&quot;$( dirname &quot;$S0&quot;)&quot;</div><div class="line"></div><div class="line">DIR=&quot;$( cd &quot;$DIRNAME&quot; &amp;&amp; pwd)&quot;</div><div class="line"></div><div class="line">echo &quot;$S0&quot;</div><div class="line"></div><div class="line">echo &quot;$DIRNAME&quot;</div><div class="line"></div><div class="line">echo &quot;$DIR&quot;</div></pre></td></tr></table></figure>
</li>
<li><p>输出:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">./ss.sh</div><div class="line">.</div><div class="line">/Users/hushiwei/Downloads</div></pre></td></tr></table></figure>
</li>
<li><p>解释:</p>
</li>
</ul>
<p>S0是脚本相对于当前目录的路径，是相对路径</p>
<p>再用dirname命令得到脚本的目录名，也是相对路径</p>
<p>用cd命令切换到脚本所在目录，再执行pwd命令，</p>
<p>就得到了脚本所在目录的绝对路径</p>
<h2 id="后台运行脚本-输出日志"><a href="#后台运行脚本-输出日志" class="headerlink" title="后台运行脚本,输出日志"></a>后台运行脚本,输出日志</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">nohup ./daily.sh &gt; data.log 2&gt;&amp;1 &amp;</div></pre></td></tr></table></figure>
<h2 id="给一个起始时间一个结束时间-按时间进行遍历"><a href="#给一个起始时间一个结束时间-按时间进行遍历" class="headerlink" title="给一个起始时间一个结束时间,按时间进行遍历"></a>给一个起始时间一个结束时间,按时间进行遍历</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">#! /bin/sh</div><div class="line">date=`date -d &quot;+0 day $1&quot; +%Y%m%d`</div><div class="line">enddate=`date -d &quot;+1 day $2&quot; +%Y%m%d`</div><div class="line"></div><div class="line">echo &quot;------------------------------&quot;</div><div class="line">echo &quot;date=$date&quot;</div><div class="line">echo &quot;enddate=$enddate&quot;</div><div class="line">echo &quot;------------------------------&quot;</div><div class="line"></div><div class="line"></div><div class="line">while [[ $date &lt; $enddate  ]]</div><div class="line">do</div><div class="line">        echo $date</div><div class="line">        date=`date -d &quot;+1 day $date&quot; +%Y%m%d`</div><div class="line">done</div><div class="line"></div><div class="line">执行: ./dotime.sh 20170101 20170130</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;写 shell 脚本两三技巧&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;Shell脚本编程30分钟入门&quot;&gt;&lt;a href=&quot;#Shell脚本编程30分钟入门&quot; class=&quot;headerlink&quot; title=&quot;Shell脚本编程30分钟入门&quot;&gt;&lt;/a&gt;Shell脚本编程30分钟入门&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/qinjx/30min_guides/blob/master/shell.md&quot;&gt;https://github.com/qinjx/30min_guides/blob/master/shell.md&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;获取脚本的所处的当前路径&quot;&gt;&lt;a href=&quot;#获取脚本的所处的当前路径&quot; class=&quot;headerlink&quot; title=&quot;获取脚本的所处的当前路径&quot;&gt;&lt;/a&gt;获取脚本的所处的当前路径&lt;/h1&gt;
    
    </summary>
    
      <category term="shell" scheme="http://dmlcoding.com/categories/shell/"/>
    
    
      <category term="shell" scheme="http://dmlcoding.com/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>Zero-Copy&amp;SendFile浅析</title>
    <link href="http://dmlcoding.com/2017/SendFileZeroCopy/"/>
    <id>http://dmlcoding.com/2017/SendFileZeroCopy/</id>
    <published>2017-03-06T03:00:00.000Z</published>
    <updated>2017-03-06T03:38:36.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>为了减少不必要的文件内存拷贝和数据传输.直接在系统内核层进行数据传输会大大的提高速度.</p>
</blockquote>
<p>比如消息传输框架kafka,为了提高消息的传输性能,就是用到了 sendFile 机制.</p>
<p> 要深入了解 zerocopy和 sendfile,可以参考一些博客<br><a id="more"></a></p>
<ul>
<li><a href="http://blog.csdn.net/oanqoanq/article/details/50865683" target="_blank" rel="external">http://blog.csdn.net/oanqoanq/article/details/50865683</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;为了减少不必要的文件内存拷贝和数据传输.直接在系统内核层进行数据传输会大大的提高速度.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;比如消息传输框架kafka,为了提高消息的传输性能,就是用到了 sendFile 机制.&lt;/p&gt;
&lt;p&gt; 要深入了解 zerocopy和 sendfile,可以参考一些博客&lt;br&gt;
    
    </summary>
    
      <category term="system" scheme="http://dmlcoding.com/categories/system/"/>
    
    
      <category term="system" scheme="http://dmlcoding.com/tags/system/"/>
    
  </entry>
  
  <entry>
    <title>二进制加法与逻辑门的关系</title>
    <link href="http://dmlcoding.com/2017/BinaryAddition/"/>
    <id>http://dmlcoding.com/2017/BinaryAddition/</id>
    <published>2017-03-05T01:24:00.000Z</published>
    <updated>2017-03-06T02:17:30.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>如何实现二进制加法,只需要简单的逻辑门就行</p>
</blockquote>
<h1 id="二进制相加"><a href="#二进制相加" class="headerlink" title="二进制相加"></a>二进制相加</h1><blockquote>
<p>二进制相加将会产生一个加法位和一个进位位</p>
</blockquote>
<ul>
<li>二进制的加法位</li>
</ul>
<a id="more"></a>
<table>
<thead>
<tr>
<th style="text-align:center">+加和</th>
<th style="text-align:center">0</th>
<th style="text-align:center">1</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
</tr>
</tbody>
</table>
<ul>
<li>二进制的进位位</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">+进位</th>
<th style="text-align:center">0</th>
<th style="text-align:center">1</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
</tr>
</tbody>
</table>
<h1 id="那么如何用逻辑门来实现这个结果呢"><a href="#那么如何用逻辑门来实现这个结果呢" class="headerlink" title="那么如何用逻辑门来实现这个结果呢?"></a>那么如何用逻辑门来实现这个结果呢?</h1><blockquote>
<p>正好可以用异或门和与门分别来实现这两个结果</p>
</blockquote>
<ul>
<li>异或门</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">XOR</th>
<th style="text-align:center">0</th>
<th style="text-align:center">1</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
</tr>
</tbody>
</table>
<ul>
<li>与门</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">AND</th>
<th style="text-align:center">0</th>
<th style="text-align:center">1</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
</tr>
</tbody>
</table>
<h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><p>1.所以可以用两个逻辑门分别求出二进制的加法了.</p>
<p>2.这里只是简单的说明二进制计算与逻辑门的关系.如果有兴趣可以看看&lt;&lt;编码：隐匿在计算机软硬件背后的语言&gt;&gt;</p>
<p>3.确实是一本很棒的书.</p>
<h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><h2 id="异或门是什么"><a href="#异或门是什么" class="headerlink" title="异或门是什么?"></a>异或门是什么?</h2><p>异或门的组成,如图所示:</p>
<p><img src="/images/pics/yihuomen1.png" alt="异或门"></p>
<p>表格显示更直观</p>
<p><img src="/images/pics/yihuomen.png" alt="异或门"></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;如何实现二进制加法,只需要简单的逻辑门就行&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;二进制相加&quot;&gt;&lt;a href=&quot;#二进制相加&quot; class=&quot;headerlink&quot; title=&quot;二进制相加&quot;&gt;&lt;/a&gt;二进制相加&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;二进制相加将会产生一个加法位和一个进位位&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;二进制的加法位&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="computer" scheme="http://dmlcoding.com/categories/computer/"/>
    
    
      <category term="computer" scheme="http://dmlcoding.com/tags/computer/"/>
    
  </entry>
  
  <entry>
    <title>用hexo搭建博客</title>
    <link href="http://dmlcoding.com/2017/HexoBlog/"/>
    <id>http://dmlcoding.com/2017/HexoBlog/</id>
    <published>2017-03-04T03:00:00.000Z</published>
    <updated>2017-06-19T10:11:58.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>安装好 hexo 后,用 Markdown 写好文章后,设置好部署模式.会把内容编译好,上传到 GitHub, 进行博客的渲染.<br>主题在 theme 文件夹下.可以随意更改.<br>如果要加页面,并且页面是分类页面还是标签等等,直接到文章中进行设置即可.<br>好好看看这个主题的设置<a href="http://theme-next.iissnan.com/theme-settings.html" target="_blank" rel="external">http://theme-next.iissnan.com/theme-settings.html</a><br>好好看看hexo <a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="external">https://hexo.io/zh-cn/docs/</a><br><a id="more"></a></p>
<h1 id="发布文章的步骤："><a href="#发布文章的步骤：" class="headerlink" title="发布文章的步骤："></a>发布文章的步骤：</h1><ul>
<li>1、hexo new 创建文章</li>
<li>2、Markdown语法编辑文章</li>
<li>3、hexo new page categories 新建页面 </li>
<li>4、部署（所有打开bash都是在blog目录下）<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">hexo clean #清除缓存 网页正常情况下可以忽略此条命令</div><div class="line">hexo generate #生成</div><div class="line">hexo server #启动服务预览，非必要，可本地浏览网页</div><div class="line">hexo deploy #部署发布</div></pre></td></tr></table></figure>
</li>
</ul>
<p>简写Tips：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">hexo n &quot;我的博客&quot; == hexo new &quot;我的博客&quot; #新建文章</div><div class="line">hexo p == hexo publish</div><div class="line">hexo g == hexo generate#生成</div><div class="line">hexo s == hexo server #启动服务预览</div><div class="line">hexo d == hexo deploy#部署</div></pre></td></tr></table></figure></p>
<hr>
<h1 id="安装-hexo"><a href="#安装-hexo" class="headerlink" title="安装 hexo"></a>安装 hexo</h1><p>安装步骤见Macbook下搭建开发环境.md</p>
<h1 id="初始化博客"><a href="#初始化博客" class="headerlink" title="初始化博客"></a>初始化博客</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// 建立一个博客文件夹，并初始化博客，&lt;folder&gt;为文件夹的名称，可以随便起名字</div><div class="line">$ hexo init &lt;folder&gt;</div><div class="line">成功提示:</div><div class="line">INFO  Start blogging with Hexo!</div><div class="line">// 进入博客文件夹，&lt;folder&gt;为文件夹的名称</div><div class="line">$ cd &lt;folder&gt;</div><div class="line">// node.js的命令，根据博客既定的dependencies配置安装所有的依赖包</div><div class="line">$ npm install</div></pre></td></tr></table></figure>
<ul>
<li>执行完 hexo init test/ 命令后, test 文件下出现了这些<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">hushiweideMacBook-Pro:test hushiwei$ ll</div><div class="line">total 24</div><div class="line">drwxr-xr-x 9 hushiwei staff 306 3 2 10:05 ./</div><div class="line">drwxr-xr-x 3 hushiwei staff 102 3 2 09:53 ../</div><div class="line">-rw-r--r-- 1 hushiwei staff 65 3 2 10:00 .gitignore</div><div class="line">-rw-r--r-- 1 hushiwei staff 1483 3 2 10:00 _config.yml</div><div class="line">drwxr-xr-x 287 hushiwei staff 9758 3 2 10:06 node_modules/</div><div class="line">-rw-r--r-- 1 hushiwei staff 443 3 2 10:00 package.json</div><div class="line">drwxr-xr-x 5 hushiwei staff 170 3 2 10:00 scaffolds/</div><div class="line">drwxr-xr-x 3 hushiwei staff 102 3 2 10:00 source/</div><div class="line">drwxr-xr-x 3 hushiwei staff 102 3 2 10:00 themes/</div></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="因为你初始化hexo-之后source目录下自带一篇hello-world文章-所以直接执行下方命令"><a href="#因为你初始化hexo-之后source目录下自带一篇hello-world文章-所以直接执行下方命令" class="headerlink" title="因为你初始化hexo 之后source目录下自带一篇hello world文章, 所以直接执行下方命令"></a>因为你初始化hexo 之后source目录下自带一篇hello world文章, 所以直接执行下方命令</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<h1 id="启动本地服务器"><a href="#启动本地服务器" class="headerlink" title="启动本地服务器"></a>启动本地服务器</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<h1 id="在浏览器输入-http-localhost-4000-就可以看见网页和模板了"><a href="#在浏览器输入-http-localhost-4000-就可以看见网页和模板了" class="headerlink" title="在浏览器输入 http://localhost:4000/就可以看见网页和模板了"></a>在浏览器输入 <a href="http://localhost:4000/就可以看见网页和模板了" target="_blank" rel="external">http://localhost:4000/就可以看见网页和模板了</a></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">INFO Start processing</div><div class="line">INFO Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.</div></pre></td></tr></table></figure>
<p>访问<a href="http://localhost:4000/，" target="_blank" rel="external">http://localhost:4000/，</a><br>便可以看到网站初步的模样，不要激动，我们还要把网页发布到Github上去。</p>
<p>我们只需要在 配置文件中把 deploy 改成这样就行了.<br>repo 这个 GitHub 的仓库我们需要提前在 GitHub 上建好.<br>仓库名为:Timehsw.github.io(Timehsw为我的 GitHub 用户名)<br>然后设置 ssh 免密码登录即可.不需要再 GitHub 上配置其他的什么东西了.真的非常简单.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy: </div><div class="line">  type: git</div><div class="line">  repo: https://github.com/Timehsw/Timehsw.github.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure></p>
<h1 id="搭建一个可以显示数学公式的hexo博客"><a href="#搭建一个可以显示数学公式的hexo博客" class="headerlink" title="搭建一个可以显示数学公式的hexo博客"></a>搭建一个可以显示数学公式的hexo博客</h1><blockquote>
<p>利用MathJax来渲染LaTeX数学公式</p>
</blockquote>
<h2 id="安装方式也很简单，在博客文件夹下执行"><a href="#安装方式也很简单，在博客文件夹下执行" class="headerlink" title="安装方式也很简单，在博客文件夹下执行"></a>安装方式也很简单，在博客文件夹下执行</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm install hexo-math --save</div><div class="line">hexo math install</div></pre></td></tr></table></figure>
<h2 id="然后写博客的时候就可以用上了"><a href="#然后写博客的时候就可以用上了" class="headerlink" title="然后写博客的时候就可以用上了"></a>然后写博客的时候就可以用上了</h2><p>如果不会用MathJax写公式,可以借助于这个网站,非常方便<br><a href="https://webdemo.myscript.com/views/math.html" target="_blank" rel="external">在线数学公式编辑器</a></p>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>看图片所示<br><img src="/images/pics/mathweb.png" alt="在线数学公式编辑器"></p>
<h1 id="配置博客"><a href="#配置博客" class="headerlink" title="配置博客"></a>配置博客</h1><p>基于上一步，我们对博客修改相应的配置，我们用到_config.yml文件，下面是该文件的默认参数信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"># Hexo Configuration</div><div class="line">## Docs: http://hexo.io/docs/configuration.html</div><div class="line">## Source: https://github.com/hexojs/hexo/</div><div class="line"># Site #站点信息</div><div class="line">title: #标题</div><div class="line">subtitle: #副标题</div><div class="line">description: #站点描述，给搜索引擎看的</div><div class="line">author: #作者</div><div class="line">email: #电子邮箱</div><div class="line">language: zh-CN #语言</div><div class="line"># URL #链接格式</div><div class="line">url: #网址</div><div class="line">root: / #根目录</div><div class="line">permalink: :year/:month/:day/:title/ #文章的链接格式</div><div class="line">tag_dir: tags #标签目录</div><div class="line">archive_dir: archives #存档目录</div><div class="line">category_dir: categories #分类目录</div><div class="line">code_dir: downloads/code</div><div class="line">permalink_defaults:</div><div class="line"># Directory #目录</div><div class="line">source_dir: source #源文件目录</div><div class="line">public_dir: public #生成的网页文件目录</div><div class="line"># Writing #写作</div><div class="line">new_post_name: :title.md #新文章标题</div><div class="line">default_layout: post #默认的模板，包括 post、page、photo、draft（文章、页面、照片、草稿）</div><div class="line">titlecase: false #标题转换成大写</div><div class="line">external_link: true #在新选项卡中打开连接</div><div class="line">filename_case: 0</div><div class="line">render_drafts: false</div><div class="line">post_asset_folder: false</div><div class="line">relative_link: false</div><div class="line">highlight: #语法高亮</div><div class="line">  enable: true #是否启用</div><div class="line">  line_number: true #显示行号</div><div class="line">  tab_replace:</div><div class="line"># Category &amp; Tag #分类和标签</div><div class="line">default_category: uncategorized #默认分类</div><div class="line">category_map:</div><div class="line">tag_map:</div><div class="line"># Archives</div><div class="line">2: 开启分页</div><div class="line">1: 禁用分页</div><div class="line">0: 全部禁用</div><div class="line">archive: 2</div><div class="line">category: 2</div><div class="line">tag: 2</div><div class="line"># Server #本地服务器</div><div class="line">port: 4000 #端口号</div><div class="line">server_ip: localhost #IP 地址</div><div class="line">logger: false</div><div class="line">logger_format: dev</div><div class="line"># Date / Time format #日期时间格式</div><div class="line">date_format: YYYY-MM-DD #参考http://momentjs.com/docs/#/displaying/format/</div><div class="line">time_format: H:mm:ss</div><div class="line"># Pagination #分页</div><div class="line">per_page: 10 #每页文章数，设置成 0 禁用分页</div><div class="line">pagination_dir: page</div><div class="line"># Disqus #Disqus评论，替换为多说</div><div class="line">disqus_shortname:</div><div class="line"># Extensions #拓展插件</div><div class="line">theme: landscape-plus #主题</div><div class="line">exclude_generator:</div><div class="line">plugins: #插件，例如生成 RSS 和站点地图的</div><div class="line">- hexo-generator-feed</div><div class="line">- hexo-generator-sitemap</div><div class="line"># Deployment #部署，将 lmintlcx 改成用户名</div><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repo: 刚刚github创库地址.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure></p>
<ul>
<li><p>注意<br>特别提醒，在每个参数的：后都要加一个空格</p>
</li>
<li><p>修改网站相关信息</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">title: Time渐行渐远</div><div class="line">subtitle:Coding Changing The World</div><div class="line">description: 时间渐行渐远</div><div class="line">author: Hushiwei</div><div class="line">language: zh-CN</div><div class="line">timezone: Asia/Shanghai</div></pre></td></tr></table></figure>
</li>
</ul>
<p>#配置部署（修改成自己的）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy: </div><div class="line">  type: git</div><div class="line">  repo: https://github.com/Timehsw/Timehsw.github.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure></p>
<h1 id="增加站内搜索Local-Search"><a href="#增加站内搜索Local-Search" class="headerlink" title="增加站内搜索Local Search"></a>增加站内搜索Local Search</h1><h2 id="安装-hexo-generator-searchdb，在站点的根目录下执行以下命令："><a href="#安装-hexo-generator-searchdb，在站点的根目录下执行以下命令：" class="headerlink" title="安装 hexo-generator-searchdb，在站点的根目录下执行以下命令："></a>安装 hexo-generator-searchdb，在站点的根目录下执行以下命令：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-generator-searchdb --save</div></pre></td></tr></table></figure>
<h2 id="编辑-站点配置文件，新增以下内容到任意位置："><a href="#编辑-站点配置文件，新增以下内容到任意位置：" class="headerlink" title="编辑 站点配置文件，新增以下内容到任意位置："></a>编辑 站点配置文件，新增以下内容到任意位置：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">search:</div><div class="line">  path: search.xml</div><div class="line">  field: post</div><div class="line">  format: html</div><div class="line">  limit: 10000</div></pre></td></tr></table></figure>
<h2 id="编辑-主题配置文件，启用本地搜索功能："><a href="#编辑-主题配置文件，启用本地搜索功能：" class="headerlink" title="编辑 主题配置文件，启用本地搜索功能："></a>编辑 主题配置文件，启用本地搜索功能：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># Local search</div><div class="line">local_search:</div><div class="line">  enable: true</div></pre></td></tr></table></figure>
<h1 id="绑定自己的域名-可选"><a href="#绑定自己的域名-可选" class="headerlink" title="绑定自己的域名(可选)"></a>绑定自己的域名(可选)</h1><h2 id="首先获取-gitpage-的-ip-地址"><a href="#首先获取-gitpage-的-ip-地址" class="headerlink" title="首先获取 gitpage 的 ip 地址"></a>首先获取 gitpage 的 ip 地址</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">hushiweideMacBook-Pro:myblog hushiwei$ ping timehsw.github.io</div><div class="line">PING github.map.fastly.net (151.101.100.133): 56 data bytes</div><div class="line">64 bytes from 151.101.100.133: icmp_seq=0 ttl=52 time=63.278 ms</div><div class="line">64 bytes from 151.101.100.133: icmp_seq=1 ttl=52 time=63.262 ms</div><div class="line">64 bytes from 151.101.100.133: icmp_seq=2 ttl=52 time=64.162 ms</div><div class="line">64 bytes from 151.101.100.133: icmp_seq=3 ttl=52 time=64.281 ms</div><div class="line">^C</div><div class="line">--- github.map.fastly.net ping statistics ---</div></pre></td></tr></table></figure>
<h2 id="设置域名与-ip-的解析"><a href="#设置域名与-ip-的解析" class="headerlink" title="设置域名与 ip 的解析"></a>设置域名与 ip 的解析</h2><p>如图所示,增加两条即可,除了 ip 地址写成自己的,其他的都一样.<br><img src="/images/pics/gitpage.png" alt="gitpage"></p>
<h2 id="增加-CNAME"><a href="#增加-CNAME" class="headerlink" title="增加 CNAME"></a>增加 CNAME</h2><p>在 hexo 博客的 <strong>source</strong> 文件夹下新建一个名为<strong>CNAME</strong>的文件,无后缀名.内容为你的域名.即可</p>
<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><ul>
<li><p>部署的时候出现</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hushiweideMacBook-Pro:test hushiwei$ hexo deploy</div><div class="line">ERROR Deployer not found: git</div></pre></td></tr></table></figure>
</li>
<li><p>解决办法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm install hexo-deployer-git --save </div><div class="line">重新 deploy 即可</div></pre></td></tr></table></figure>
</li>
<li><p>阅读全文</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;!-- more --&gt;</div></pre></td></tr></table></figure>
<p>用这个手动截断更合适</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h1&gt;&lt;p&gt;安装好 hexo 后,用 Markdown 写好文章后,设置好部署模式.会把内容编译好,上传到 GitHub, 进行博客的渲染.&lt;br&gt;主题在 theme 文件夹下.可以随意更改.&lt;br&gt;如果要加页面,并且页面是分类页面还是标签等等,直接到文章中进行设置即可.&lt;br&gt;好好看看这个主题的设置&lt;a href=&quot;http://theme-next.iissnan.com/theme-settings.html&quot;&gt;http://theme-next.iissnan.com/theme-settings.html&lt;/a&gt;&lt;br&gt;好好看看hexo &lt;a href=&quot;https://hexo.io/zh-cn/docs/&quot;&gt;https://hexo.io/zh-cn/docs/&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="blog" scheme="http://dmlcoding.com/categories/blog/"/>
    
    
      <category term="blog" scheme="http://dmlcoding.com/tags/blog/"/>
    
      <category term="macbook" scheme="http://dmlcoding.com/tags/macbook/"/>
    
  </entry>
  
  <entry>
    <title>学习摩尔斯码</title>
    <link href="http://dmlcoding.com/2017/mrs/"/>
    <id>http://dmlcoding.com/2017/mrs/</id>
    <published>2017-03-03T01:00:00.000Z</published>
    <updated>2017-06-19T10:01:50.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>摩尔斯码由点和划组成,也就是2个符号.这两个符号编码可表示一切.</p>
</blockquote>
<a id="more"></a>
<h1 id="摩尔斯表"><a href="#摩尔斯表" class="headerlink" title="摩尔斯表"></a>摩尔斯表</h1><ul>
<li>26字母</li>
</ul>
<p><img src="/images/pics/mrsl.png" alt="摩尔斯字母"></p>
<h1 id="快速记忆方法"><a href="#快速记忆方法" class="headerlink" title="快速记忆方法"></a>快速记忆方法</h1><blockquote>
<p>跟着表发送字母还是很方便,关键是解码的时候,如何有效的进行解码</p>
</blockquote>
<h2 id="图形"><a href="#图形" class="headerlink" title="图形"></a>图形</h2><p><img src="/images/pics/mrs.jpeg" alt="摩尔斯字母"></p>
<h2 id="树形"><a href="#树形" class="headerlink" title="树形"></a>树形</h2><blockquote>
<p>用树形方法进行解码毫无疑问非常有效的了</p>
</blockquote>
<p><img src="/images/pics/mrstree.png" alt="摩尔斯字母"></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;摩尔斯码由点和划组成,也就是2个符号.这两个符号编码可表示一切.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="fun" scheme="http://dmlcoding.com/categories/fun/"/>
    
    
      <category term="fun" scheme="http://dmlcoding.com/tags/fun/"/>
    
  </entry>
  
  <entry>
    <title>17年阅读书单</title>
    <link href="http://dmlcoding.com/2017/ReadBooks33/"/>
    <id>http://dmlcoding.com/2017/ReadBooks33/</id>
    <published>2017-03-02T14:00:00.000Z</published>
    <updated>2017-03-03T08:44:44.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>书单很多,思考却不多.我们总是以为有了书单就有了知识一般.静下心来,好好看书吧!</p>
</blockquote>
<h1 id="优秀的程序员应该具备两方面能力"><a href="#优秀的程序员应该具备两方面能力" class="headerlink" title="优秀的程序员应该具备两方面能力"></a>优秀的程序员应该具备两方面能力</h1><ul>
<li>良好的程序设计能力：<ul>
<li>掌握常用的数据结构和算法（例如链表，栈，堆，队列，排序和散列）；</li>
<li>理解计算机科学的核心概念（例如计算机系统结构、操作系统、编译原理和计算机网络）；</li>
<li>熟悉至少两门以上编程语言（例如C++，Java，C#，和Python）；<a id="more"></a></li>
</ul>
</li>
<li>专业的软件开发素养：<ul>
<li>具备良好的编程实践，能够编写可测试（Testable），可扩展（Extensible），可维护（Maintainable）的代码；</li>
<li>把握客户需求，按时交付客户所需要的软件产品；</li>
<li>理解现代软件开发过程中的核心概念（例如面向对象程序设计，测试驱动开发，持续集成，和持续交付等等）。</li>
</ul>
</li>
</ul>
<h1 id="入门书籍"><a href="#入门书籍" class="headerlink" title="入门书籍"></a>入门书籍</h1><h2 id="程序设计"><a href="#程序设计" class="headerlink" title="程序设计"></a>程序设计</h2><ul>
<li>基础理论：<a href="https://www.amazon.cn/gp/product/B009RSXIB4/ref=as_li_ss_tl?ie=UTF8&amp;camp=536&amp;tag=lucida-23&amp;creativeASIN=B009RSXIB4&amp;linkCode=as2&amp;creative=3132" target="_blank" rel="external">编码：隐匿在计算机软硬件背后的语言</a></li>
<li>编程语言：<ul>
<li>Java：Java核心技术（第9版）</li>
<li>Python：Python基础教程（第二版）</li>
</ul>
</li>
<li>编程语言理论：编程语言实现模式</li>
<li>程序设计：程序设计方法</li>
<li>算法与数据结构：算法（第4版）</li>
<li>程序调试：调试九法——软硬件错误的排查之道</li>
</ul>
<h2 id="软件开发"><a href="#软件开发" class="headerlink" title="软件开发"></a>软件开发</h2><ul>
<li>编程实践：程序设计实践</li>
<li>面向对象程序设计：Head First设计模式</li>
<li>重构：重构</li>
<li>软件测试：How to Break Software</li>
<li>项目管理：极客与团队</li>
<li>专业开发：程序员修炼之道：从小工到专家</li>
<li>大师之言：奇思妙想：15位计算机天才及其重大发现</li>
<li>界面设计：写给大家看的设计书</li>
<li>交互设计：通用设计法则</li>
</ul>
<h2 id="个人成长"><a href="#个人成长" class="headerlink" title="个人成长"></a>个人成长</h2><ul>
<li>职业规划：软件开发者路线图</li>
<li>思维方式：程序员的思维修炼：开发认知潜能的九堂课</li>
<li>求职面试：金领简历：敲开苹果微软谷歌的大门</li>
<li>英语写作：The Only Grammar Book You’ll Ever Need</li>
</ul>
<h1 id="必读书籍"><a href="#必读书籍" class="headerlink" title="必读书籍"></a>必读书籍</h1><h2 id="程序设计-1"><a href="#程序设计-1" class="headerlink" title="程序设计"></a>程序设计</h2><ul>
<li>基础理论：<a href="https://www.amazon.cn/gp/product/B004BJ18KM/ref=as_li_ss_tl?ie=UTF8&amp;camp=536&amp;tag=lucida-23&amp;creativeASIN=B004BJ18KM&amp;linkCode=as2&amp;creative=3132" target="_blank" rel="external">深入理解计算机系统（第2版）</a></li>
<li>编程语言：<ul>
<li>Java：Effective Java（第2版）</li>
<li>Python：Python参考手册（第4版）</li>
</ul>
</li>
<li>编程语言理论：程序设计语言——实践之路（第3版）</li>
<li>程序设计：计算机程序的构造与解释（第2版）</li>
<li>算法与数据结构：编程珠玑（第2版）</li>
<li>程序调试：调试九法——软硬件错误的排查之道</li>
</ul>
<h2 id="软件开发-1"><a href="#软件开发-1" class="headerlink" title="软件开发"></a>软件开发</h2><ul>
<li>编程实践：代码大全（第2版）</li>
<li>面向对象程序设计：设计模式</li>
<li>重构：修改代码的艺术</li>
<li>软件测试：xUnit Test Patterns</li>
<li>项目管理：人月神话</li>
<li>专业开发：程序员职业素养</li>
<li>大师之言：编程人生：15位软件先驱访谈录</li>
<li>界面设计：认知与设计：理解UI设计准则（第2版）</li>
<li>交互设计：交互设计精髓（第3版）</li>
</ul>
<h2 id="个人成长-1"><a href="#个人成长-1" class="headerlink" title="个人成长"></a>个人成长</h2><ul>
<li>职业规划：软件开发者路线图</li>
<li>思维方式：如何把事情做到最好</li>
<li>求职面试：程序员面试金典（第5版）</li>
<li>英语写作：风格的要素</li>
</ul>
<h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><blockquote>
<p>正是有前辈们无私的分享自己的经验,我们才能少走弯路,思考自己的职业生涯.</p>
</blockquote>
<h2 id="如何成为一个优秀的程序员而不是码农"><a href="#如何成为一个优秀的程序员而不是码农" class="headerlink" title="如何成为一个优秀的程序员而不是码农"></a>如何成为一个优秀的程序员而不是码农</h2><ul>
<li>基础理论包括了程序员应该掌握的计算机基础知识；</li>
<li>编程语言对软件开发至关重要，我选择了C，C++，Java，C#，Python，和JavaScript这六门主流编程语言进行介绍，如果想进一步理解编程语言，可以阅读编程语言理论里的书目；</li>
<li>在理解编程语言的基础上，优秀的程序员还应该了解各种程序设计技巧，熟悉基本的算法数据结构，并且能够高效的进行程序调试。</li>
<li>良好的程序设计能力是成为优秀程序员的前提，但软件开发知识也是必不可少的：优秀的程序员应具备良好的编程实践，知道如何利用面向对象，重构，和软件测试编写可复用，可扩展，可维护的代码，并具备软件项目管理知识和专业开发素养；</li>
<li>就像我们可以从名人传记里学习名人的成功经验，程序员也可以通过追随优秀程序员的足迹使自己少走弯路。大师之言包含一系列对大师程序员/计算机科学家的访谈，任何程序员都可以从中获益良多；</li>
<li>为了打造用户满意的软件产品，程序员应当掌握一定的界面设计知识和交互设计知识（是的，这些工作应该交给UI和UX，但如果你想独自打造一个产品呢？）；</li>
<li>专业程序员应当对自己进行职业规划，并熟悉程序员求职面试的流程，以便在职业道路上越走越远；</li>
<li>软件开发是一项需要不断学习的技能，学习思维方式可以有效的提升学习能力和学习效率；</li>
<li>软件开发是一项国际化的工作，为了让更多的人了解你的代码（工作），良好的英语写作能力必不可少。</li>
</ul>
<h2 id="谢谢Lucida"><a href="#谢谢Lucida" class="headerlink" title="谢谢Lucida"></a>谢谢Lucida</h2><ul>
<li>正是看了<a href="http://zh.lucida.me/" target="_blank" rel="external">Lucida大神</a>的博客,我才更清楚接下来如何更好的提高自己的能力.让自己成为一名优秀的程序员而不是一名普通的码农.</li>
<li>书单和内容是<a href="http://zh.lucida.me/blog/developer-reading-list/" target="_blank" rel="external">Lucida博客里面的程序员必读书单 1.0</a>里的,这里我摘出来作为我接下来的书单.</li>
<li>虽不认识Lucida大神,但真心谢谢你的无私分享.</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;书单很多,思考却不多.我们总是以为有了书单就有了知识一般.静下心来,好好看书吧!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;优秀的程序员应该具备两方面能力&quot;&gt;&lt;a href=&quot;#优秀的程序员应该具备两方面能力&quot; class=&quot;headerlink&quot; title=&quot;优秀的程序员应该具备两方面能力&quot;&gt;&lt;/a&gt;优秀的程序员应该具备两方面能力&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;良好的程序设计能力：&lt;ul&gt;
&lt;li&gt;掌握常用的数据结构和算法（例如链表，栈，堆，队列，排序和散列）；&lt;/li&gt;
&lt;li&gt;理解计算机科学的核心概念（例如计算机系统结构、操作系统、编译原理和计算机网络）；&lt;/li&gt;
&lt;li&gt;熟悉至少两门以上编程语言（例如C++，Java，C#，和Python）；
    
    </summary>
    
      <category term="book" scheme="http://dmlcoding.com/categories/book/"/>
    
    
      <category term="book" scheme="http://dmlcoding.com/tags/book/"/>
    
  </entry>
  
</feed>
